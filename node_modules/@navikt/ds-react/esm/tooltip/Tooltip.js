var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { autoUpdate, arrow as flArrow, flip, offset, safePolygon, shift, useDismiss, useFloating, useFocus, useHover, useInteractions, } from "@floating-ui/react";
import cl from "clsx";
import React, { cloneElement, forwardRef, useRef } from "react";
import { useModalContext } from "../modal/Modal.context.js";
import { Portal } from "../portal/index.js";
import { Detail } from "../typography/index.js";
import { useId } from "../util/hooks/index.js";
import { useControllableState } from "../util/hooks/useControllableState.js";
import { useMergeRefs } from "../util/hooks/useMergeRefs.js";
/**
 * A component that displays a tooltip when the user hovers over its child element.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/tooltip)
 * @see 🏷️ {@link TooltipProps}
 *
 * @example
 * ```jsx
 * <Tooltip content="Skriv ut dokument">
 *   <Button icon={<PrinterLargeIcon title="demo knapp" />} />
 * </Tooltip>
 * ```
 */
export const Tooltip = forwardRef((_a, ref) => {
    var { children, className, arrow: _arrow = true, placement: _placement = "top", open, defaultOpen = false, onOpenChange, offset: _offset, content, delay = 150, id, keys, maxChar = 80 } = _a, rest = __rest(_a, ["children", "className", "arrow", "placement", "open", "defaultOpen", "onOpenChange", "offset", "content", "delay", "id", "keys", "maxChar"]);
    const [_open, _setOpen] = useControllableState({
        defaultValue: defaultOpen,
        value: open,
        onChange: onOpenChange,
    });
    const arrowRef = useRef(null);
    const modalContext = useModalContext(false);
    const rootElement = modalContext ? modalContext.ref.current : undefined;
    const { x, y, strategy, context, placement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {}, hide: { referenceHidden } = {}, }, refs, } = useFloating({
        placement: _placement,
        open: _open,
        onOpenChange: (newState) => _setOpen(newState),
        middleware: [
            offset(_offset ? _offset : _arrow ? 10 : 2),
            shift(),
            flip({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            flArrow({ element: arrowRef, padding: 5 }),
        ],
        whileElementsMounted: modalContext
            ? (reference, floating, update) => 
            // Reduces jumping in Chrome when used in a Modal and it's the first focusable element.
            // Can be removed when autofocus starts working on <dialog> in Chrome. See also Modal.tsx
            autoUpdate(reference, floating, update, { animationFrame: true })
            : autoUpdate,
        strategy: modalContext ? "fixed" : undefined,
    });
    const { getReferenceProps, getFloatingProps } = useInteractions([
        useHover(context, { handleClose: safePolygon(), restMs: delay }),
        useFocus(context),
        useDismiss(context),
    ]);
    const ariaId = useId(id);
    const mergedRef = useMergeRefs(ref, refs.setFloating);
    const childMergedRef = useMergeRefs(children.ref, refs.setReference);
    if (!children ||
        (children === null || children === void 0 ? void 0 : children.type) === React.Fragment ||
        children === React.Fragment) {
        console.error("<Tooltip> children needs to be a single ReactElement and not: <React.Fragment/> | <></>");
        return null;
    }
    if ((content === null || content === void 0 ? void 0 : content.length) > maxChar) {
        _open &&
            console.warn(`Because of strict accessibility concers we encourage all Tooltips to have less than 80 characters. Can be overwritten with the maxChar-prop\n\nLength:${content.length}\nTooltip-content: ${content}`);
    }
    return (React.createElement(React.Fragment, null,
        cloneElement(children, getReferenceProps(Object.assign(Object.assign({}, children.props), { ref: childMergedRef, "aria-describedby": _open
                ? cl(ariaId, children === null || children === void 0 ? void 0 : children.props["aria-describedby"])
                : children === null || children === void 0 ? void 0 : children.props["aria-describedby"] }))),
        React.createElement(Portal, { rootElement: rootElement, asChild: true }, _open && (React.createElement("div", Object.assign({}, getFloatingProps(Object.assign(Object.assign({}, rest), { ref: mergedRef, style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
                visibility: referenceHidden ? "hidden" : "visible",
            }, role: "tooltip", id: ariaId, className: cl("navds-tooltip", "navds-detail navds-detail--small", className) })), { "data-side": placement }),
            content,
            keys && (React.createElement("span", { className: "navds-tooltip__keys" }, keys.map((key) => (React.createElement(Detail, { as: "kbd", key: key, className: "navds-tooltip__key" }, key))))),
            _arrow && (React.createElement("div", { ref: (node) => {
                    arrowRef.current = node;
                }, className: "navds-tooltip__arrow", style: {
                    left: arrowX != null ? `${arrowX}px` : "",
                    top: arrowY != null ? `${arrowY}px` : "",
                    right: "",
                    bottom: "",
                    [{
                        top: "bottom",
                        right: "left",
                        bottom: "top",
                        left: "right",
                    }[placement]]: "-3.5px",
                } })))))));
});
export default Tooltip;
//# sourceMappingURL=Tooltip.js.map