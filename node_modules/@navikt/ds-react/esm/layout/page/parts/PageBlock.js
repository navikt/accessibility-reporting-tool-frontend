var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
export const widths = ["text", "md", "lg", "xl", "2xl"];
/**
 * Acts as a top-level container for defining max-width, gutters and horizontal centering
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/primitives/page)
 * @see 🏷️ {@link PageBlockProps}
 * @see [🤖 OverridableComponent](https://aksel.nav.no/grunnleggende/kode/overridablecomponent) support
 *
 * @example
 * ```jsx
 * <Page
 *   footer={<Page.Block width="xl" gutters />}
 * >
 *   <Page.Block width="xl" gutters />// Header
 *   <Page.Block width="xl" gutters />// Content
 * </Page>
 * ```
 * @example
 * With background bleed
 * Wrapping `Page.Block` with `Box` allows the background-color to use full screen-width
 * ```jsx
 * <Page
 *   footer={<Box background="..."><Page.Block width="xl" gutters /></Box>}
 *   footerPosition="belowFold"
 * >
 *   <Box background="..."><Page.Block width="xl" gutters /></Box>//Header
 *   <Box background="..."><Page.Block width="xl" gutters /></Box>//Content
 * </Page>
 * ```
 */
export const PageBlock = forwardRef((_a, ref) => {
    var { as: Component = "div", gutters, className, width } = _a, rest = __rest(_a, ["as", "gutters", "className", "width"]);
    return (React.createElement(Component, Object.assign({}, rest, { className: cl("navds-pageblock", `navds-pageblock--${width}`, className, { "navds-pageblock--gutters": gutters }), ref: ref })));
});
export default PageBlock;
//# sourceMappingURL=PageBlock.js.map