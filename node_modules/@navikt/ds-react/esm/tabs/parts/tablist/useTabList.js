import { useCallback } from "react";
import { useTabsContext, useTabsDescendantsContext } from "../../Tabs.context.js";
/**
 * TabList hook to manage multiple tab buttons,
 * and ensures only one tab is selected at a time.
 */
export function useTabList() {
    const { focusedValue, loop, selectedValue, setFocusedValue } = useTabsContext();
    const descendants = useTabsDescendantsContext();
    /**
     * Implements rowing-tabindex for horizontal tabs
     */
    const onKeyDown = useCallback((event) => {
        /**
         * Tabs.Tab is registered with its prop 'value'.
         * We can then use it to find the current focuses descendant
         */
        const idx = descendants
            .values()
            .findIndex((x) => x.value === focusedValue);
        const nextTab = () => {
            var _a;
            const next = descendants.nextEnabled(idx, loop);
            next && ((_a = next.node) === null || _a === void 0 ? void 0 : _a.focus());
        };
        const prevTab = () => {
            var _a;
            const prev = descendants.prevEnabled(idx, loop);
            prev && ((_a = prev.node) === null || _a === void 0 ? void 0 : _a.focus());
        };
        const firstTab = () => {
            var _a;
            const first = descendants.firstEnabled();
            first && ((_a = first.node) === null || _a === void 0 ? void 0 : _a.focus());
        };
        const lastTab = () => {
            var _a;
            const last = descendants.lastEnabled();
            last && ((_a = last.node) === null || _a === void 0 ? void 0 : _a.focus());
        };
        const keyMap = {
            ArrowLeft: prevTab,
            ArrowRight: nextTab,
            Home: firstTab,
            End: lastTab,
        };
        const action = keyMap[event.key];
        if (action) {
            event.preventDefault();
            action(event);
        }
        else if (event.key === "Tab") {
            /**
             * Imperative focus during keydown is risky so we prevent React's batching updates
             * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332
             */
            selectedValue && setTimeout(() => setFocusedValue(selectedValue));
        }
    }, [descendants, focusedValue, loop, selectedValue, setFocusedValue]);
    return { onKeyDown };
}
//# sourceMappingURL=useTabList.js.map