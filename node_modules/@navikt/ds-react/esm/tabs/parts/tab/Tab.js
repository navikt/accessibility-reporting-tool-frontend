var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { BodyShort } from "../../../typography/index.js";
import { useTabsContext } from "../../Tabs.context.js";
import { useTab } from "./useTab.js";
export const Tab = forwardRef((_a, ref) => {
    var _b, _c;
    var { className, as: Component = "button", label, icon, value, onClick, onFocus, disabled, id } = _a, rest = __rest(_a, ["className", "as", "label", "icon", "value", "onClick", "onFocus", "disabled", "id"]);
    const tabCtx = useTab({ value, onClick, onFocus, disabled }, ref);
    const ctx = useTabsContext();
    if (!label && !icon) {
        console.error("<Tabs.Tab/> needs label and/or icon");
        return null;
    }
    return (React.createElement(Component, Object.assign({ ref: tabCtx.ref }, rest, { className: cl("navds-tabs__tab", `navds-tabs__tab--${(_b = ctx === null || ctx === void 0 ? void 0 : ctx.size) !== null && _b !== void 0 ? _b : "medium"}`, `navds-tabs__tab-icon--${ctx === null || ctx === void 0 ? void 0 : ctx.iconPosition}`, className, {
            "navds-tabs__tab--icon-only": icon && !label,
            "navds-tabs__tab--fill": ctx.fill,
        }), role: "tab", type: "button", "aria-selected": tabCtx.isSelected, "data-state": tabCtx.isSelected ? "active" : "inactive", tabIndex: tabCtx.isFocused ? 0 : -1, "aria-controls": (_c = rest["aria-controls"]) !== null && _c !== void 0 ? _c : tabCtx.controlsId, id: id !== null && id !== void 0 ? id : tabCtx.id, onFocus: tabCtx.onFocus, onClick: tabCtx.onClick }),
        React.createElement(BodyShort, { as: "span", className: "navds-tabs__tab-inner", size: ctx === null || ctx === void 0 ? void 0 : ctx.size },
            React.createElement("span", { "aria-hidden": !!label }, icon),
            React.createElement("span", null, label))));
});
export default Tab;
//# sourceMappingURL=Tab.js.map