import cl from "clsx";
import React, { useRef } from "react";
import { Button } from "../../button/index.js";
import { Modal } from "../../modal/index.js";
import { useModalContext } from "../../modal/Modal.context.js";
import { Popover } from "../../popover/index.js";
import { useMedia } from "../../util/hooks/index.js";
import { modalCloseButtonLabel, modalLabel } from "../utils/labels.js";
export const DateWrapper = ({ open, children, onClose, anchor, locale, variant, popoverProps, }) => {
    const modalRef = useRef(null);
    const isInModal = useModalContext(false) !== undefined;
    const hideModal = useMedia("screen and (min-width: 768px)", true) && !isInModal;
    if (hideModal) {
        return (React.createElement(Popover, Object.assign({ arrow: false, anchorEl: anchor, open: open, onClose: onClose, placement: "bottom-start", role: "dialog", className: cl("navds-date__popover", {
                "navds-date": variant === "month",
            }), flip: false }, popoverProps), children));
    }
    return (React.createElement(Modal, { ref: modalRef, open: open, onClose: (event) => {
            event.stopPropagation();
            onClose();
        }, "aria-label": modalLabel(locale, variant), className: cl("navds-date__modal", {
            "navds-date__nested-modal": isInModal,
            "navds-date": variant === "month",
        }), closeOnBackdropClick: true },
        React.createElement("div", { className: "navds-date__modal-body" },
            children,
            React.createElement(Button, { variant: "tertiary", onClick: () => { var _a; return (_a = modalRef === null || modalRef === void 0 ? void 0 : modalRef.current) === null || _a === void 0 ? void 0 : _a.close(); }, size: "small", type: "button" }, modalCloseButtonLabel(locale)))));
};
//# sourceMappingURL=DateWrapper.js.map