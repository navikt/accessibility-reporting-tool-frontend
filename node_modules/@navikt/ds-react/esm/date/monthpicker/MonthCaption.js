import { isAfter, isBefore, setYear, startOfMonth, startOfYear, } from "date-fns";
import React from "react";
import { useDayPicker } from "react-day-picker";
import { ArrowLeftIcon, ArrowRightIcon } from "@navikt/aksel-icons";
import { Button } from "../../button/index.js";
import { Select } from "../../form/select/index.js";
import { useSharedMonthContext } from "../context/index.js";
import { labelNextYear, labelPrevYear } from "../utils/index.js";
export const MonthCaption = () => {
    const { fromDate, toDate, formatters: { formatYearCaption }, locale, } = useDayPicker();
    const { hasDropdown, year, toYear } = useSharedMonthContext();
    const years = [];
    if (hasDropdown && fromDate && toDate) {
        const fromYear = fromDate.getFullYear();
        const toDateYear = toDate.getFullYear();
        for (let currYear = fromYear; currYear <= toDateYear; currYear++) {
            years.push(setYear(startOfYear(new Date()), currYear));
        }
        if (!years.map((x) => x.getFullYear()).includes(year.getFullYear())) {
            years.push(setYear(startOfYear(new Date()), year.getFullYear()));
        }
        years.sort((a, b) => b.getFullYear() - a.getFullYear());
    }
    const handleYearChange = (e) => toYear(setYear(startOfMonth(new Date()), Number(e.target.value)));
    const handleButtonClick = (val) => {
        const newYear = Number(year.getFullYear() + val);
        toYear(setYear(year, newYear));
    };
    const disablePreviousYear = () => {
        return fromDate
            ? isBefore((year === null || year === void 0 ? void 0 : year.getFullYear()) - 1, fromDate === null || fromDate === void 0 ? void 0 : fromDate.getFullYear())
            : false;
    };
    const disableNextYear = () => {
        return toDate
            ? isAfter((year === null || year === void 0 ? void 0 : year.getFullYear()) + 1, toDate === null || toDate === void 0 ? void 0 : toDate.getFullYear())
            : false;
    };
    return (React.createElement("div", { className: "navds-date__caption" },
        React.createElement(Button, { className: "navds-date__caption-button", disabled: disablePreviousYear(), onClick: () => handleButtonClick(-1), "aria-label": labelPrevYear(locale === null || locale === void 0 ? void 0 : locale.code), icon: React.createElement(ArrowLeftIcon, { "aria-hidden": true }), variant: "tertiary", type: "button" }),
        hasDropdown ? (React.createElement(Select, { label: "velg \u00E5r", hideLabel: true, value: year === null || year === void 0 ? void 0 : year.getFullYear(), onChange: handleYearChange, className: "navds-date__caption__year" }, years.map((yearOpt) => (React.createElement("option", { key: yearOpt.getFullYear(), value: yearOpt.getFullYear() }, formatYearCaption(yearOpt, { locale })))))) : (React.createElement("span", { className: "navds-date__year-label", "aria-live": "polite" }, year.getFullYear())),
        React.createElement(Button, { className: "navds-date__caption-button", disabled: disableNextYear(), onClick: () => handleButtonClick(1), "aria-label": labelNextYear(locale === null || locale === void 0 ? void 0 : locale.code), icon: React.createElement(ArrowRightIcon, { "aria-hidden": true }), variant: "tertiary", type: "button" })));
};
export default MonthCaption;
//# sourceMappingURL=MonthCaption.js.map