import cl from "clsx";
import React, { forwardRef, useRef, useState } from "react";
import { DayPickerProvider } from "react-day-picker";
import { useId } from "../../util/hooks/index.js";
import { useMergeRefs } from "../../util/hooks/useMergeRefs.js";
import { DateContext, SharedMonthProvider } from "../context/index.js";
import { MonthPickerInput } from "../parts/DateInput.js";
import { DateWrapper } from "../parts/DateWrapper.js";
import { getLocaleFromString } from "../utils/index.js";
import MonthCaption from "./MonthCaption.js";
import MonthPickerStandalone from "./MonthPickerStandalone.js";
import MonthSelector from "./MonthSelector.js";
/**
 * A component that displays a month picker.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/monthpicker)
 * @see üè∑Ô∏è {@link MonthPickerProps}
 *
 * @example
 * ```jsx
 *  const { inputProps, monthpickerProps } = useMonthpicker({
 *    onMonthChange: console.log,
 *  });
 *
 *  return (
 *     <MonthPicker {...monthpickerProps} dropdownCaption>
 *       <MonthPicker.Input
 *         {...inputProps}
 *         label="Velg m√•ned"
 *       />
 *     </MonthPicker>
 *  );
 * ```
 */
export const MonthPicker = forwardRef(({ children, dropdownCaption = false, fromDate, toDate, disabled = [], selected, open: _open, id, onClose, onOpenToggle, locale = "nb", onMonthSelect, className, wrapperClassName, defaultSelected, year, onYearChange, strategy = "absolute", }, ref) => {
    const ariaId = useId(id);
    const [open, setOpen] = useState(_open !== null && _open !== void 0 ? _open : false);
    const wrapperRef = useRef(null);
    const mergedRef = useMergeRefs(wrapperRef, ref);
    const [selectedMonth, setSelectedMonth] = useState(defaultSelected);
    const handleSelect = (month) => {
        var _a;
        !onMonthSelect && setSelectedMonth(month);
        onMonthSelect === null || onMonthSelect === void 0 ? void 0 : onMonthSelect(month);
        month && ((_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false));
    };
    if (dropdownCaption && (!fromDate || !toDate)) {
        console.warn("Using dropdownCaption required fromDate and toDate");
        return null;
    }
    return (React.createElement(DateContext.Provider, { value: {
            open: _open !== null && _open !== void 0 ? _open : open,
            onOpen: () => {
                setOpen((x) => !x);
                onOpenToggle === null || onOpenToggle === void 0 ? void 0 : onOpenToggle();
            },
            ariaId,
            defined: true,
        } },
        React.createElement("div", { ref: mergedRef, className: cl("navds-date__wrapper", wrapperClassName) },
            children,
            React.createElement(DateWrapper, { open: _open !== null && _open !== void 0 ? _open : open, anchor: wrapperRef.current, onClose: () => { var _a; return (_a = onClose === null || onClose === void 0 ? void 0 : onClose()) !== null && _a !== void 0 ? _a : setOpen(false); }, locale: locale, variant: "month", popoverProps: {
                    id: ariaId,
                    strategy,
                } },
                React.createElement(DayPickerProvider, { initialProps: {
                        locale: getLocaleFromString(locale),
                        selected: selected !== null && selected !== void 0 ? selected : selectedMonth,
                        toDate,
                        fromDate,
                        month: selected !== null && selected !== void 0 ? selected : selectedMonth,
                    } },
                    React.createElement("div", { className: cl("rdp-month", className) },
                        React.createElement(SharedMonthProvider, { dropdownCaption: dropdownCaption, disabled: disabled, selected: selected !== null && selected !== void 0 ? selected : selectedMonth, onSelect: handleSelect, year: year, onYearChange: onYearChange },
                            React.createElement(MonthCaption, null),
                            React.createElement(MonthSelector, null))))))));
});
MonthPicker.Standalone = MonthPickerStandalone;
MonthPicker.Input = MonthPickerInput;
export default MonthPicker;
//# sourceMappingURL=MonthPicker.js.map