import cl from "clsx";
import React, { forwardRef, useState } from "react";
import { DayPickerProvider } from "react-day-picker";
import { SharedMonthProvider } from "../context/index.js";
import { getLocaleFromString } from "../utils/index.js";
import MonthCaption from "./MonthCaption.js";
import MonthSelector from "./MonthSelector.js";
export const MonthPickerStandalone = forwardRef(({ dropdownCaption = false, fromDate, toDate, disabled = [], selected, className, locale = "nb", onMonthSelect, defaultSelected, year, onYearChange, }, ref) => {
    const [selectedMonth, setSelectedMonth] = useState(defaultSelected);
    const handleSelect = (month) => {
        setSelectedMonth(month);
        onMonthSelect === null || onMonthSelect === void 0 ? void 0 : onMonthSelect(month);
    };
    if (dropdownCaption && (!fromDate || !toDate)) {
        console.warn("Using dropdownCaption required fromDate and toDate");
        return null;
    }
    return (React.createElement("div", { ref: ref, className: cl("navds-date__wrapper", className) },
        React.createElement(DayPickerProvider, { initialProps: {
                locale: getLocaleFromString(locale),
                selected: selected !== null && selected !== void 0 ? selected : selectedMonth,
                toDate,
                fromDate,
                month: selected !== null && selected !== void 0 ? selected : selectedMonth,
            } },
            React.createElement("div", { className: "navds-date rdp-month" },
                React.createElement(SharedMonthProvider, { dropdownCaption: dropdownCaption, disabled: disabled, selected: selected !== null && selected !== void 0 ? selected : selectedMonth, onSelect: handleSelect, year: year, onYearChange: onYearChange },
                    React.createElement(MonthCaption, null),
                    React.createElement(MonthSelector, null))))));
});
export default MonthPickerStandalone;
//# sourceMappingURL=MonthPickerStandalone.js.map