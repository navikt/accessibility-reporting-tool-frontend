import cl from "clsx";
import { compareAsc, compareDesc, format, isSameMonth, setYear, } from "date-fns";
import React, { useEffect, useRef } from "react";
import { useDayPicker } from "react-day-picker";
import { useSharedMonthContext } from "../context/index.js";
import { dateIsInCurrentMonth, isMatch, nextEnabled } from "../utils/index.js";
const disableMonth = (month, fromDate, toDate) => {
    if (fromDate && toDate) {
        return ((compareAsc(month, fromDate) === -1 && !isSameMonth(month, fromDate)) ||
            (compareDesc(month, toDate) === -1 && !isSameMonth(month, toDate)));
    }
    if (fromDate) {
        return compareAsc(month, fromDate) === -1 && !isSameMonth(month, fromDate);
    }
    if (toDate) {
        return compareDesc(month, toDate) === -1 && !isSameMonth(month, toDate);
    }
    return false;
};
export const MonthButton = ({ month, months, focus, setFocus, tabRoot, setTabRoot, }) => {
    const ref = useRef(null);
    const { hasDropdown, selected, onSelect, year, toYear, disabled } = useSharedMonthContext();
    const { fromDate, toDate, locale } = useDayPicker();
    const isSelected = selected && isSameMonth(month, selected);
    useEffect(() => {
        if (focus) {
            isSameMonth(month, focus) && ref.current && ref.current.focus();
            setFocus();
        }
    }, [focus, month, setFocus]);
    const isDisabled = isMatch(setYear(month, year.getFullYear()), disabled) ||
        disableMonth(month, fromDate, toDate);
    return (React.createElement("button", { ref: ref, type: "button", onClick: () => onSelect(isSelected ? undefined : month), disabled: isDisabled, "aria-pressed": !!isSelected, className: cl("navds-date__month-button", {
            "rdp-day_today": dateIsInCurrentMonth(month, year),
            "rdp-day_selected": isSelected,
            "rdp-day_disabled": isDisabled,
        }), tabIndex: tabRoot && isSameMonth(month, setYear(tabRoot, year.getFullYear()))
            ? 0
            : -1, onKeyDown: (e) => {
            const next = nextEnabled(months, e.key, disabled, month, toYear, year, hasDropdown, fromDate, toDate);
            setFocus(next);
            setTabRoot(next);
        }, onFocus: () => {
            setTabRoot(focus);
        } },
        React.createElement("span", { "aria-hidden": "true" }, format(new Date(month), "LLL", { locale })
            .replace(".", "")
            .substring(0, 3)),
        React.createElement("span", { className: "navds-sr-only" }, format(new Date(month), "LLLL", { locale }))));
};
export default MonthButton;
//# sourceMappingURL=MonthButton.js.map