import { setYear, startOfMonth } from "date-fns";
import React, { createContext, useContext, useState } from "react";
import { useDayPicker } from "react-day-picker";
import { getInitialYear } from "../utils/index.js";
export const SharedMonthContext = createContext({
    hasDropdown: false,
    year: new Date(),
    toYear: () => null,
    disabled: [],
    onSelect: () => null,
});
export const useSharedMonthContext = () => useContext(SharedMonthContext);
export const SharedMonthProvider = ({ children, dropdownCaption, disabled, selected, onSelect, year: _year, onYearChange, }) => {
    const context = useDayPicker();
    const [year, toYear] = useState(getInitialYear(context));
    const hasDropdown = !!(dropdownCaption && context.fromDate && context.toDate);
    if (context.fromDate &&
        context.toDate &&
        (context === null || context === void 0 ? void 0 : context.fromDate) >= (context === null || context === void 0 ? void 0 : context.toDate)) {
        console.warn("fromDate needs to be before toDate - MonthPicker");
    }
    return (React.createElement(SharedMonthContext.Provider, { value: {
            year: _year !== null && _year !== void 0 ? _year : year,
            toYear: (y) => {
                toYear(y);
                onYearChange === null || onYearChange === void 0 ? void 0 : onYearChange(y);
            },
            hasDropdown,
            disabled,
            selected,
            onSelect: (v) => v
                ? onSelect(setYear(startOfMonth(v), (_year !== null && _year !== void 0 ? _year : year).getFullYear()))
                : onSelect(undefined),
        } }, children));
};
//# sourceMappingURL=useSharedMonthContext.js.map