var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import { isWeekend } from "date-fns";
import React, { forwardRef } from "react";
import { DayPicker, isMatch } from "react-day-picker";
import { omit } from "../../util/index.js";
import { getLocaleFromString, labels } from "../utils/index.js";
import Caption from "./parts/Caption.js";
import DropdownCaption from "./parts/DropdownCaption.js";
import { HeadRow } from "./parts/HeadRow.js";
import Row from "./parts/Row.js";
import TableHead from "./parts/TableHead.js";
import WeekNumber from "./parts/WeekNumber.js";
export const DatePickerStandalone = forwardRef((_a, ref) => {
    var _b;
    var { className, locale = "nb", dropdownCaption, disabled = [], disableWeekends = false, showWeekNumber = false, selected, defaultSelected, onSelect, fixedWeeks = false, onWeekNumberClick } = _a, rest = __rest(_a, ["className", "locale", "dropdownCaption", "disabled", "disableWeekends", "showWeekNumber", "selected", "defaultSelected", "onSelect", "fixedWeeks", "onWeekNumberClick"]);
    const [selectedDates, setSelectedDates] = React.useState(defaultSelected);
    const mode = (_b = rest.mode) !== null && _b !== void 0 ? _b : "single";
    /**
     * @param newSelected Date | Date[] | DateRange | undefined
     */
    const handleSelect = (newSelected) => {
        setSelectedDates(newSelected);
        onSelect === null || onSelect === void 0 ? void 0 : onSelect(newSelected);
    };
    return (React.createElement("div", { ref: ref, className: cl("navds-date__standalone-wrapper", className) },
        React.createElement(DayPicker, Object.assign({ locale: getLocaleFromString(locale), mode: mode, onSelect: handleSelect, selected: selected !== null && selected !== void 0 ? selected : selectedDates, components: {
                Caption: dropdownCaption ? DropdownCaption : Caption,
                Head: TableHead,
                HeadRow,
                WeekNumber,
                Row,
            }, className: "navds-date", classNames: { vhidden: "navds-sr-only" }, disabled: (day) => {
                return ((disableWeekends && isWeekend(day)) || isMatch(day, disabled));
            }, weekStartsOn: 1, initialFocus: false, labels: labels, modifiers: {
                weekend: (day) => disableWeekends && isWeekend(day),
            }, modifiersClassNames: {
                weekend: "rdp-day__weekend",
            }, showWeekNumber: showWeekNumber, onWeekNumberClick: mode === "multiple" ? onWeekNumberClick : undefined, fixedWeeks: fixedWeeks, showOutsideDays: true }, omit(rest, ["children", "id"])))));
});
export default DatePickerStandalone;
//# sourceMappingURL=DatePickerStandalone.js.map