import { addDays, addWeeks, differenceInCalendarDays, endOfMonth, endOfWeek, getWeek, getWeeksInMonth, startOfMonth, startOfWeek, } from "date-fns";
export function getMonthWeeks(month, options) {
    const _options = Object.assign(Object.assign({}, options), { weekStartsOn: 1 });
    const weeksInMonth = daysToMonthWeeks(startOfMonth(month), endOfMonth(month), _options);
    if (_options === null || _options === void 0 ? void 0 : _options.useFixedWeeks) {
        // Add extra weeks to the month, up to 6 weeks
        const nrOfMonthWeeks = getWeeksInMonth(month, _options);
        if (nrOfMonthWeeks < 6) {
            const lastWeek = weeksInMonth[weeksInMonth.length - 1];
            const lastDate = lastWeek.dates[lastWeek.dates.length - 1];
            const toDate = addWeeks(lastDate, 6 - nrOfMonthWeeks);
            const extraWeeks = daysToMonthWeeks(addWeeks(lastDate, 1), toDate, _options);
            weeksInMonth.push(...extraWeeks);
        }
    }
    return weeksInMonth;
}
/** Return the weeks between two dates.  */
export function daysToMonthWeeks(fromDate, toDate, options) {
    const toWeek = endOfWeek(toDate, options);
    const fromWeek = startOfWeek(fromDate, options);
    const nOfDays = differenceInCalendarDays(toWeek, fromWeek);
    const days = [];
    for (let i = 0; i <= nOfDays; i++) {
        days.push(addDays(fromWeek, i));
    }
    const weeksInMonth = days.reduce((result, date) => {
        const weekNumber = getWeek(date, options);
        const existingWeek = result.find((value) => value.weekNumber === weekNumber);
        if (existingWeek) {
            existingWeek.dates.push(date);
            return result;
        }
        result.push({
            weekNumber,
            dates: [date],
        });
        return result;
    }, []);
    return weeksInMonth;
}
//# sourceMappingURL=get-month-weeks.js.map