var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { Label } from "../typography/index.js";
import { useId } from "../util/index.js";
import { ToggleGroupDescendantsProvider, ToggleGroupProvider, useToggleGroupDescendants, } from "./ToggleGroup.context.js";
import ToggleItem from "./parts/ToggleItem.js";
import { useToggleGroup } from "./useToggleGroup.js";
/**
 * A component that displays a group of toggle buttons.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/toggle-group)
 * @see 🏷️ {@link ToggleGroupProps}
 *
 * @example
 * ```jsx
 * <ToggleGroup defaultValue="lest" onChange={console.log} size="small">
 *   <ToggleGroup.Item value="ulest">Ulest</ToggleGroup.Item>
 *   <ToggleGroup.Item value="lest">Leste</ToggleGroup.Item>
 *   <ToggleGroup.Item value="sendt">Sendt</ToggleGroup.Item>
 * </ToggleGroup>
 * ```
 */
export const ToggleGroup = forwardRef((_a, ref) => {
    var { className, children, onChange, size = "medium", label, value, defaultValue, "aria-describedby": userDescribedby, variant = "action", fill = false } = _a, rest = __rest(_a, ["className", "children", "onChange", "size", "label", "value", "defaultValue", "aria-describedby", "variant", "fill"]);
    const descendants = useToggleGroupDescendants();
    const toggleGroupContext = useToggleGroup({
        defaultValue,
        value,
        onChange,
    });
    /**
     * ToggleGroupProvider handles memoization.
     */
    const context = Object.assign(Object.assign({}, toggleGroupContext), { size });
    const labelId = useId();
    if (!value && !defaultValue) {
        console.error("ToggleGroup without value or defaultvalue is not allowed");
    }
    if (!value && !defaultValue) {
        console.error("ToggleGroup needs either a value or defaultValue");
    }
    return (React.createElement(ToggleGroupDescendantsProvider, { value: descendants },
        React.createElement(ToggleGroupProvider, Object.assign({}, context),
            React.createElement("div", { className: cl("navds-toggle-group__wrapper", className, {
                    "navds-toggle-group__wrapper--fill": fill,
                }) },
                label && (React.createElement(Label, { size: size, className: "navds-toggle-group__label", id: labelId }, label)),
                React.createElement("div", Object.assign({}, rest, { ref: ref, className: cl("navds-toggle-group", `navds-toggle-group--${size}`, `navds-toggle-group--${variant}`), "aria-describedby": cl(userDescribedby, !!label && labelId) || undefined, role: "radiogroup" }), children)))));
});
ToggleGroup.Item = ToggleItem;
export default ToggleGroup;
//# sourceMappingURL=ToggleGroup.js.map