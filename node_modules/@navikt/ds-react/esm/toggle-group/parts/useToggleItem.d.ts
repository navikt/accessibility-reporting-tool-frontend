/// <reference types="react" />
export interface UseToggleItemProps {
    /**
     * If `true`, the `ToggleItem` won't be toggleable
     * @default false
     */
    disabled?: boolean;
    onClick?: React.MouseEventHandler;
    onFocus?: React.FocusEventHandler;
    onKeyDown?: React.KeyboardEventHandler;
    value: string;
}
export declare function useToggleItem<P extends UseToggleItemProps>({ value, disabled, onFocus: _onFocus, onClick, onKeyDown: _onKeyDown, }: P, ref: React.ForwardedRef<HTMLButtonElement>): {
    ref: (instance: HTMLButtonElement | null) => void;
    isSelected: boolean;
    isFocused: boolean;
    onClick: (event: import("react").MouseEvent<Element, MouseEvent>) => void;
    onFocus: ((event: import("react").FocusEvent<Element, Element>) => void) | undefined;
    onKeyDown: (event: import("react").KeyboardEvent<Element>) => void;
};
