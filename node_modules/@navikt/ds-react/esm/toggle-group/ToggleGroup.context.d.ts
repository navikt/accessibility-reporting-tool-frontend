/// <reference types="react" />
import { ToggleGroupProps } from "./ToggleGroup.types.js";
import { useToggleGroup } from "./useToggleGroup.js";
interface ToggleContextProps {
    size: "medium" | "small";
}
export declare const ToggleGroupContext: import("react").Context<ToggleContextProps | null>;
export declare const ToggleGroupDescendantsProvider: import("react").Provider<import("../util/hooks/descendants/descendant.js").DescendantsManager<HTMLButtonElement, {
    value: string;
}>>, useToggleGroupDescendantsContext: <S extends boolean = true>(strict?: S) => S extends true ? import("../util/hooks/descendants/descendant.js").DescendantsManager<HTMLButtonElement, {
    value: string;
}> : import("../util/hooks/descendants/descendant.js").DescendantsManager<HTMLButtonElement, {
    value: string;
}> | undefined, useToggleGroupDescendants: () => import("../util/hooks/descendants/descendant.js").DescendantsManager<HTMLButtonElement, {
    value: string;
}>, useToggleGroupDescendant: (options?: import("../util/hooks/descendants/descendant.js").DescendantOptions<{
    value: string;
}> | undefined) => {
    descendants: import("../util/hooks/descendants/descendant.js").DescendantsManager<HTMLButtonElement, {
        value: string;
    }>;
    index: number;
    enabledIndex: number;
    register: (instance: HTMLButtonElement | null) => void;
};
type ToggleGroupProviderProps = ReturnType<typeof useToggleGroup> & Pick<ToggleGroupProps, "size">;
export declare const ToggleGroupProvider: import("react").ForwardRefExoticComponent<{
    selectedValue: string;
    setSelectedValue: (next: import("react").SetStateAction<string>) => void;
    focusedValue: string;
    setFocusedValue: import("react").Dispatch<import("react").SetStateAction<string>>;
} & Pick<ToggleGroupProps, "size"> & {
    children: import("react").ReactNode;
} & import("react").RefAttributes<unknown>>, useToggleGroupContext: <S extends boolean = true>(strict?: S) => S extends true ? ToggleGroupProviderProps : ToggleGroupProviderProps | undefined;
export {};
