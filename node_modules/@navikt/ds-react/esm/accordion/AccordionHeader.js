var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useContext } from "react";
import { ChevronDownIcon } from "@navikt/aksel-icons";
import { Heading } from "../typography/index.js";
import { composeEventHandlers } from "../util/composeEventHandlers.js";
import { AccordionContext } from "./AccordionContext.js";
import { AccordionItemContext } from "./AccordionItem.js";
const AccordionHeader = forwardRef((_a, ref) => {
    var _b;
    var { children, className, onClick } = _a, rest = __rest(_a, ["children", "className", "onClick"]);
    const itemContext = useContext(AccordionItemContext);
    const accordionContext = useContext(AccordionContext);
    if (itemContext === null) {
        console.error("<Accordion.Header> has to be used within an <Accordion.Item>, which in turn must be within an <Accordion>");
        return null;
    }
    return (React.createElement("button", Object.assign({ ref: ref }, rest, { className: cl("navds-accordion__header", className), onClick: composeEventHandlers(onClick, itemContext.toggleOpen), "aria-expanded": itemContext.open, type: "button" }),
        React.createElement("span", { className: "navds-accordion__icon-wrapper" },
            React.createElement(ChevronDownIcon, { className: "navds-accordion__header-chevron", title: "Vis mer", "aria-hidden": true })),
        React.createElement(Heading, { size: (_b = accordionContext === null || accordionContext === void 0 ? void 0 : accordionContext.headingSize) !== null && _b !== void 0 ? _b : "small", as: "span", className: "navds-accordion__header-content" }, children)));
});
export default AccordionHeader;
//# sourceMappingURL=AccordionHeader.js.map