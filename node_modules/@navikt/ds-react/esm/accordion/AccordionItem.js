var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { createContext, forwardRef, useContext, useRef } from "react";
import { omit } from "../util/index.js";
import { useControllableState } from "../util/hooks/useControllableState.js";
import { AccordionContext } from "./AccordionContext.js";
export const AccordionItemContext = createContext(null);
const AccordionItem = forwardRef((_a, ref) => {
    var { children, className, open, defaultOpen = false, onOpenChange } = _a, rest = __rest(_a, ["children", "className", "open", "defaultOpen", "onOpenChange"]);
    const [_open, _setOpen] = useControllableState({
        defaultValue: defaultOpen,
        value: open,
        onChange: onOpenChange,
    });
    const context = useContext(AccordionContext);
    const shouldAnimate = useRef(!(Boolean(open) || defaultOpen));
    const handleOpen = () => {
        _setOpen((x) => !x);
        shouldAnimate.current = true;
    };
    if (!(context === null || context === void 0 ? void 0 : context.mounted)) {
        console.error("<Accordion.Item> has to be used within an <Accordion>");
    }
    return (React.createElement("div", Object.assign({ className: cl("navds-accordion__item", className, {
            "navds-accordion__item--open": _open,
            "navds-accordion__item--neutral": (context === null || context === void 0 ? void 0 : context.variant) === "neutral",
            "navds-accordion__item--no-animation": !shouldAnimate.current,
        }), ref: ref }, omit(rest, ["onClick"])),
        React.createElement(AccordionItemContext.Provider, { value: {
                open: _open,
                toggleOpen: handleOpen,
            } }, children)));
});
export default AccordionItem;
//# sourceMappingURL=AccordionItem.js.map