var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
/**
 * Simple skeleton loader
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/skeleton)
 * @see 🏷️ {@link SkeletonProps}
 * @example
 * ```jsx
 * <Skeleton variant="circle" height="5rem" width="5rem" />
 * ```
 */
export const Skeleton = forwardRef((_a, ref) => {
    var { className, children, height, width, style, variant = "text", as: As = "div" } = _a, rest = __rest(_a, ["className", "children", "height", "width", "style", "variant", "as"]);
    return (React.createElement(As, Object.assign({}, rest, { ref: ref, className: cl("navds-skeleton", className, `navds-skeleton--${variant}`, {
            "navds-skeleton--has-children": Boolean(children),
            "navds-skeleton--no-height": !height,
            "navds-skeleton--no-width": !width,
            "navds-skeleton--inline": As === "span",
        }), style: Object.assign(Object.assign({}, style), { width, height }), "aria-hidden": true }), children));
});
export default Skeleton;
//# sourceMappingURL=Skeleton.js.map