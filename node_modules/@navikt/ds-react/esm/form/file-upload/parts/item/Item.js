var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { ExclamationmarkTriangleIcon } from "@navikt/aksel-icons";
import { BodyShort } from "../../../../typography/index.js";
import { useI18n } from "../../../../util/i18n/i18n.context.js";
import { useFileUploadTranslation } from "../../FileUpload.context.js";
import ItemButton from "./ItemButton.js";
import ItemIcon from "./ItemIcon.js";
import ItemName from "./ItemName.js";
import { formatFileSize } from "./utils/format-file-size.js";
export const Item = forwardRef((_a, ref) => {
    var { as: Component = "div", file, status = "idle", error, className, href, onFileClick, button, translations } = _a, rest = __rest(_a, ["as", "file", "status", "error", "className", "href", "onFileClick", "button", "translations"]);
    const context = useFileUploadTranslation(false);
    const translate = useI18n("FileUpload", { item: translations }, context === null || context === void 0 ? void 0 : context.translations);
    const showError = !!error && status === "idle";
    function getStatusText() {
        if (status === "uploading") {
            return translate("item.uploading");
        }
        if (status === "downloading") {
            return translate("item.downloading");
        }
        return formatFileSize(file);
    }
    return (React.createElement(Component, Object.assign({ ref: ref }, rest, { className: cl("navds-file-item", className, {
            "navds-file-item--error": showError,
        }) }),
        React.createElement("div", { className: "navds-file-item__inner" },
            React.createElement(ItemIcon, { isLoading: status !== "idle", file: file, showError: showError }),
            React.createElement("div", { className: "navds-file-item__file-info" },
                React.createElement(ItemName, { file: file, href: href, onClick: onFileClick }),
                React.createElement(BodyShort, { as: "div", size: "small" }, getStatusText()),
                React.createElement("div", { className: "navds-file-item__error", "aria-relevant": "additions removals", "aria-live": "polite" }, showError && (React.createElement(BodyShort, { size: "small", className: "navds-file-item__error-content" },
                    React.createElement(ExclamationmarkTriangleIcon, { "aria-hidden": true }),
                    error)))),
            status === "idle" && button && (React.createElement(ItemButton, Object.assign({}, button, { title: translate(button.action === "retry"
                    ? "item.retryButtonTitle"
                    : "item.deleteButtonTitle") }))))));
});
export default Item;
//# sourceMappingURL=Item.js.map