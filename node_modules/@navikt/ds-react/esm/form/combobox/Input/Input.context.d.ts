import React, { ChangeEventHandler } from "react";
import { FormFieldType } from "../../useFormField.js";
import { ComboboxProps } from "../types.js";
interface InputContextValue extends FormFieldType {
    clearInput: NonNullable<ComboboxProps["onClear"]>;
    error?: string;
    focusInput: () => void;
    inputRef: React.RefObject<HTMLInputElement>;
    value: string;
    setValue: (text: string) => void;
    onChange: ChangeEventHandler<HTMLInputElement>;
    searchTerm: string;
    setSearchTerm: React.Dispatch<React.SetStateAction<string>>;
    shouldAutocomplete?: boolean;
    toggleOpenButtonRef: React.RefObject<HTMLButtonElement>;
}
declare const useInputContext: <S extends boolean = true>(strict?: S) => S extends true ? InputContextValue : InputContextValue | undefined;
declare const InputProvider: ({ children, value: props }: {
    children: any;
    value: any;
}) => React.JSX.Element;
export { InputProvider as InputContextProvider, useInputContext };
