var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable jsx-a11y/no-static-element-interactions */
import cl from "clsx";
import React, { forwardRef } from "react";
import { XMarkIcon } from "@navikt/aksel-icons";
import { useMergeRefs } from "../../../util/hooks/index.js";
import { useFilteredOptionsContext } from "../FilteredOptions/filteredOptionsContext.js";
import SelectedOptions from "../SelectedOptions/SelectedOptions.js";
import { useSelectedOptionsContext } from "../SelectedOptions/selectedOptionsContext.js";
import Input from "./Input.js";
import { useInputContext } from "./Input.context.js";
import ToggleListButton from "./ToggleListButton.js";
/* eslint-disable jsx-a11y/click-events-have-key-events */
export const InputController = forwardRef((props, ref) => {
    const { clearButton = true, clearButtonLabel, toggleListButton = true, toggleListButtonLabel, inputClassName, shouldShowSelectedOptions = true } = props, rest = __rest(props, ["clearButton", "clearButtonLabel", "toggleListButton", "toggleListButtonLabel", "inputClassName", "shouldShowSelectedOptions"]);
    const { clearInput, focusInput, inputProps, value, size = "medium", inputRef, toggleOpenButtonRef, } = useInputContext();
    const { activeDecendantId } = useFilteredOptionsContext();
    const { selectedOptions } = useSelectedOptionsContext();
    const mergedInputRef = useMergeRefs(inputRef, ref);
    return (React.createElement("div", { className: cl("navds-combobox__wrapper-inner navds-text-field__input", {
            "navds-combobox__wrapper-inner--virtually-unfocused": activeDecendantId !== undefined,
        }), onClick: focusInput },
        !shouldShowSelectedOptions ? (React.createElement(Input, Object.assign({ id: inputProps.id, ref: mergedInputRef, inputClassName: inputClassName }, rest))) : (React.createElement(SelectedOptions, { selectedOptions: selectedOptions, size: size },
            React.createElement(Input, Object.assign({ id: inputProps.id, ref: mergedInputRef, inputClassName: inputClassName }, rest)))),
        React.createElement("div", null,
            value && clearButton && (React.createElement("button", { type: "button", onClick: clearInput, className: "navds-combobox__button-clear", tabIndex: -1 },
                React.createElement("span", { className: "navds-sr-only" }, clearButtonLabel ? clearButtonLabel : "TÃ¸m"),
                React.createElement(XMarkIcon, { "aria-hidden": true }))),
            toggleListButton && (React.createElement(ToggleListButton, { toggleListButtonLabel: toggleListButtonLabel, ref: toggleOpenButtonRef })))));
});
//# sourceMappingURL=InputController.js.map