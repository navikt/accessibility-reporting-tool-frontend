import cl from "clsx";
import React from "react";
import { CheckmarkIcon, PlusIcon } from "@navikt/aksel-icons";
import { Loader } from "../../../loader/index.js";
import { BodyShort, Label } from "../../../typography/index.js";
import { useInputContext } from "../Input/Input.context.js";
import { useSelectedOptionsContext } from "../SelectedOptions/selectedOptionsContext.js";
import { isInList, toComboboxOption } from "../combobox-utils.js";
import filteredOptionsUtil from "./filtered-options-util.js";
import { useFilteredOptionsContext } from "./filteredOptionsContext.js";
const FilteredOptions = () => {
    var _a;
    const { inputProps: { id }, size, value, } = useInputContext();
    const { allowNewValues, isLoading, isListOpen, filteredOptions, setFilteredOptionsRef, isMouseLastUsedInputDevice, setIsMouseLastUsedInputDevice, isValueNew, toggleIsListOpen, activeDecendantId, virtualFocus, } = useFilteredOptionsContext();
    const { isMultiSelect, selectedOptions, toggleOption, maxSelected } = useSelectedOptionsContext();
    const isDisabled = (option) => (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && !isInList(option.value, selectedOptions);
    const shouldRenderNonSelectables = (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) || // Render maxSelected message
        isLoading || // Render loading message
        (!isLoading && filteredOptions.length === 0 && !allowNewValues); // Render no hits message
    const shouldRenderFilteredOptionsList = (allowNewValues && isValueNew && !(maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached)) || // Render add new option
        filteredOptions.length > 0; // Render filtered options
    return (React.createElement("div", { className: cl("navds-combobox__list", {
            "navds-combobox__list--closed": !isListOpen,
            "navds-combobox__list--with-hover": isMouseLastUsedInputDevice,
        }), id: filteredOptionsUtil.getFilteredOptionsId(id), tabIndex: -1 },
        shouldRenderNonSelectables && (React.createElement("div", { className: "navds-combobox__list_non-selectables", role: "status" },
            (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && (React.createElement("div", { className: "navds-combobox__list-item--max-selected", id: filteredOptionsUtil.getMaxSelectedOptionsId(id) }, (_a = maxSelected.message) !== null && _a !== void 0 ? _a : `${selectedOptions.length} av ${maxSelected.limit} er valgt.`)),
            isLoading && (React.createElement("div", { className: "navds-combobox__list-item--loading", id: filteredOptionsUtil.getIsLoadingId(id) },
                React.createElement(Loader, { title: "S\u00F8ker..." }))),
            !isLoading && filteredOptions.length === 0 && !allowNewValues && (React.createElement("div", { className: "navds-combobox__list-item--no-options", id: filteredOptionsUtil.getNoHitsId(id) }, "Ingen s\u00F8ketreff")))),
        shouldRenderFilteredOptionsList && (React.createElement("ul", { ref: setFilteredOptionsRef, role: "listbox", className: "navds-combobox__list-options" },
            isValueNew && !(maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && allowNewValues && (React.createElement("li", { tabIndex: -1, onMouseMove: () => {
                    if (activeDecendantId !==
                        filteredOptionsUtil.getAddNewOptionId(id)) {
                        virtualFocus.moveFocusToElement(filteredOptionsUtil.getAddNewOptionId(id));
                        setIsMouseLastUsedInputDevice(true);
                    }
                }, onPointerUp: (event) => {
                    toggleOption(toComboboxOption(value), event);
                    if (!isMultiSelect && !isInList(value, selectedOptions))
                        toggleIsListOpen(false);
                }, id: filteredOptionsUtil.getAddNewOptionId(id), className: cl("navds-combobox__list-item navds-combobox__list-item--new-option", {
                    "navds-combobox__list-item--new-option--focus": activeDecendantId ===
                        filteredOptionsUtil.getAddNewOptionId(id),
                }), role: "option", "aria-selected": false },
                React.createElement(PlusIcon, { "aria-hidden": true }),
                React.createElement(BodyShort, { size: size },
                    "Legg til",
                    " ",
                    React.createElement(Label, { as: "span", size: size },
                        "\u201C",
                        value,
                        "\u201D")))),
            filteredOptions.map((option) => (React.createElement("li", { className: cl("navds-combobox__list-item", {
                    "navds-combobox__list-item--focus": activeDecendantId ===
                        filteredOptionsUtil.getOptionId(id, option.label),
                    "navds-combobox__list-item--selected": isInList(option.value, selectedOptions),
                }), "data-no-focus": isDisabled(option) || undefined, id: filteredOptionsUtil.getOptionId(id, option.label), key: option.label, tabIndex: -1, onMouseMove: () => {
                    if (activeDecendantId !==
                        filteredOptionsUtil.getOptionId(id, option.label)) {
                        virtualFocus.moveFocusToElement(filteredOptionsUtil.getOptionId(id, option.label));
                        setIsMouseLastUsedInputDevice(true);
                    }
                }, onPointerUp: (event) => {
                    if (isDisabled(option)) {
                        return;
                    }
                    toggleOption(option, event);
                    if (!isMultiSelect &&
                        !isInList(option.value, selectedOptions)) {
                        toggleIsListOpen(false);
                    }
                }, role: "option", "aria-selected": isInList(option.value, selectedOptions), "aria-disabled": isDisabled(option) || undefined },
                React.createElement(BodyShort, { size: size }, option.label),
                isInList(option.value, selectedOptions) && React.createElement(CheckmarkIcon, null))))))));
};
export default FilteredOptions;
//# sourceMappingURL=FilteredOptions.js.map