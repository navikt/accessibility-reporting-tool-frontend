import cl from "clsx";
import React, { useRef, useState } from "react";
import { useInputContext } from "./Input/Input.context.js";
const ComboboxWrapper = ({ children, className, hasError, inputProps, inputSize, toggleIsListOpen, }) => {
    const { toggleOpenButtonRef } = useInputContext();
    const wrapperRef = useRef(null);
    const [hasFocusWithin, setHasFocusWithin] = useState(false);
    function onFocusInsideWrapper(e) {
        var _a;
        if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) &&
            (toggleOpenButtonRef === null || toggleOpenButtonRef === void 0 ? void 0 : toggleOpenButtonRef.current) !== e.target) {
            toggleIsListOpen(true);
            setHasFocusWithin(true);
        }
    }
    function onBlurWrapper(e) {
        var _a;
        if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))) {
            toggleIsListOpen(false);
            setHasFocusWithin(false);
        }
    }
    return (React.createElement("div", { ref: wrapperRef, className: cl(className, "navds-form-field", `navds-form-field--${inputSize}`, {
            "navds-combobox--error": hasError,
            "navds-combobox--disabled": !!inputProps.disabled,
            "navds-combobox--focused": hasFocusWithin,
        }), onFocus: onFocusInsideWrapper, onBlur: onBlurWrapper }, children));
};
export default ComboboxWrapper;
//# sourceMappingURL=ComboboxWrapper.js.map