var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useContext } from "react";
import { BodyShort, ErrorMessage, Label } from "../../typography/index.js";
import { omit } from "../../util/index.js";
import { ReadOnlyIcon } from "../ReadOnlyIcon.js";
import { FieldsetContext } from "./context.js";
import { useFieldset } from "./useFieldset.js";
export const Fieldset = forwardRef((props, ref) => {
    var _a, _b, _c;
    const { inputProps, errorId, showErrorMsg, hasError, size, readOnly, inputDescriptionId, } = useFieldset(props);
    const fieldset = useContext(FieldsetContext);
    const { children, className, errorPropagation = true, legend, description, hideLegend, nativeReadOnly = true } = props, rest = __rest(props, ["children", "className", "errorPropagation", "legend", "description", "hideLegend", "nativeReadOnly"]);
    return (React.createElement(FieldsetContext.Provider, { value: {
            error: errorPropagation ? (_a = props.error) !== null && _a !== void 0 ? _a : fieldset === null || fieldset === void 0 ? void 0 : fieldset.error : undefined,
            errorId: cl({
                [errorId]: showErrorMsg,
                [(_b = fieldset === null || fieldset === void 0 ? void 0 : fieldset.errorId) !== null && _b !== void 0 ? _b : ""]: !!(fieldset === null || fieldset === void 0 ? void 0 : fieldset.error),
            }),
            size,
            disabled: (_c = props.disabled) !== null && _c !== void 0 ? _c : false,
            readOnly,
        } },
        React.createElement("fieldset", Object.assign({}, omit(rest, ["errorId", "error", "size", "readOnly"]), omit(inputProps, ["aria-describedby", "aria-invalid"]), { ref: ref, className: cl(className, "navds-fieldset", `navds-fieldset--${size}`, {
                "navds-fieldset--error": hasError,
                "navds-fieldset--readonly": readOnly,
            }) }),
            React.createElement(Label, { size: size, as: "legend", className: cl("navds-fieldset__legend", {
                    "navds-sr-only": !!hideLegend,
                }) },
                React.createElement(ReadOnlyIcon, { readOnly: readOnly, nativeReadOnly: nativeReadOnly }),
                legend),
            !!description && (React.createElement(BodyShort, { className: cl("navds-fieldset__description", {
                    "navds-sr-only": !!hideLegend,
                }), id: inputDescriptionId, size: size !== null && size !== void 0 ? size : "medium", as: "div" }, props.description)),
            children,
            React.createElement("div", { id: errorId, "aria-relevant": "additions removals", "aria-live": "polite", className: "navds-fieldset__error" }, showErrorMsg && (React.createElement(ErrorMessage, { size: size }, props.error))))));
});
export default Fieldset;
//# sourceMappingURL=Fieldset.js.map