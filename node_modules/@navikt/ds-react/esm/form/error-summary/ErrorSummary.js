var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, isValidElement } from "react";
import { BodyShort, Heading } from "../../typography/index.js";
import { useId } from "../../util/hooks/index.js";
import ErrorSummaryItem from "./ErrorSummaryItem.js";
/**
 * A component that displays a summary of errors.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/errorsummary)
 * @see üè∑Ô∏è {@link ErrorSummaryProps}
 *
 * @example
 * ```jsx
 * <ErrorSummary heading="Du m√• fikse disse feilene f√∏r du kan sende inn s√∏knad.">
 *   <ErrorSummary.Item href="#1">
 *     Felt m√• fylles ut med alder
 *   </ErrorSummary.Item>
 *   <ErrorSummary.Item href="#2">
 *     Tekstfeltet m√• ha en godkjent e-mail
 *   </ErrorSummary.Item>
 * </ErrorSummary>
 * ```
 */
export const ErrorSummary = forwardRef((_a, ref) => {
    var { children, className, size = "medium", headingTag = "h2", heading } = _a, rest = __rest(_a, ["children", "className", "size", "headingTag", "heading"]);
    const headingId = useId();
    return (React.createElement("section", Object.assign({ ref: ref }, rest, { className: cl(className, "navds-error-summary", `navds-error-summary--${size}`), tabIndex: -1, "aria-live": "polite", "aria-relevant": "all", "aria-labelledby": headingId }),
        React.createElement(Heading, { className: "navds-error-summary__heading", as: headingTag, size: "small", id: headingId }, heading),
        React.createElement(BodyShort, { as: "ul", size: size, className: "navds-error-summary__list" }, React.Children.map(children, (child) => {
            if (!isValidElement(child)) {
                return null;
            }
            return React.createElement("li", { key: child.toString() }, child);
        }))));
});
ErrorSummary.Item = ErrorSummaryItem;
export default ErrorSummary;
//# sourceMappingURL=ErrorSummary.js.map