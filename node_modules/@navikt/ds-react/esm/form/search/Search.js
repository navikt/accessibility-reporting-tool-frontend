var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useCallback, useRef, useState, } from "react";
import { MagnifyingGlassIcon, XMarkIcon } from "@navikt/aksel-icons";
import { BodyShort, ErrorMessage, Label } from "../../typography/index.js";
import { omit } from "../../util/index.js";
import { useMergeRefs } from "../../util/hooks/useMergeRefs.js";
import { useFormField } from "../useFormField.js";
import SearchButton from "./SearchButton.js";
import { SearchContext } from "./context.js";
/**
 * A component that displays a search input field.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/search)
 * @see 🏷️ {@link SearchProps}
 *
 * @example
 * ```jsx
 * <form role="search">
 *   <Search label="Søk alle NAV sine sider" variant="primary" />
 * </form>
 * ```
 */
export const Search = forwardRef((props, ref) => {
    const { inputProps, size = "medium", inputDescriptionId, errorId, showErrorMsg, hasError, } = useFormField(props, "searchfield");
    const { className, hideLabel = true, label, description, value, clearButtonLabel, onClear, clearButton = true, children, variant = "primary", defaultValue, onChange, onSearchClick, htmlSize, role } = props, rest = __rest(props, ["className", "hideLabel", "label", "description", "value", "clearButtonLabel", "onClear", "clearButton", "children", "variant", "defaultValue", "onChange", "onSearchClick", "htmlSize", "role"]);
    const searchRef = useRef(null);
    const mergedRef = useMergeRefs(searchRef, ref);
    const [internalValue, setInternalValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : "");
    const handleChange = useCallback((v) => {
        value === undefined && setInternalValue(v);
        onChange === null || onChange === void 0 ? void 0 : onChange(v);
    }, [onChange, value]);
    const handleClear = useCallback((event) => {
        var _a, _b;
        onClear === null || onClear === void 0 ? void 0 : onClear(event);
        handleChange("");
        searchRef.current && ((_b = (_a = searchRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a));
    }, [handleChange, onClear]);
    const handleClick = () => {
        onSearchClick === null || onSearchClick === void 0 ? void 0 : onSearchClick(`${value !== null && value !== void 0 ? value : internalValue}`);
    };
    return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    React.createElement("div", { onKeyDown: (e) => {
            var _a, _b;
            if (e.key !== "Escape") {
                return;
            }
            ((_a = searchRef.current) === null || _a === void 0 ? void 0 : _a.value) &&
                ((_b = searchRef.current) === null || _b === void 0 ? void 0 : _b.value) !== "" &&
                e.preventDefault();
            handleClear({ trigger: "Escape", event: e });
        }, className: cl(className, "navds-form-field", `navds-form-field--${size}`, "navds-search", {
            "navds-search--error": hasError,
            "navds-search--disabled": !!inputProps.disabled,
            "navds-search--with-size": !!htmlSize,
        }) },
        React.createElement(Label, { htmlFor: inputProps.id, size: size, className: cl("navds-form-field__label", {
                "navds-sr-only": hideLabel,
            }) }, label),
        !!description && (React.createElement(BodyShort, { className: cl("navds-form-field__description", {
                "navds-sr-only": hideLabel,
            }), id: inputDescriptionId, size: size, as: "div" }, description)),
        React.createElement("div", { className: "navds-search__wrapper" },
            React.createElement("div", { className: "navds-search__wrapper-inner" },
                variant === "simple" && (React.createElement(MagnifyingGlassIcon, { "aria-hidden": true, className: "navds-search__search-icon" })),
                React.createElement("input", Object.assign({ ref: mergedRef }, omit(rest, ["error", "errorId", "size", "readOnly"]), inputProps, { value: value !== null && value !== void 0 ? value : internalValue, onChange: (e) => handleChange(e.target.value), type: "search", role: role !== null && role !== void 0 ? role : "searchbox", className: cl(className, "navds-search__input", `navds-search__input--${variant}`, "navds-text-field__input", "navds-body-short", `navds-body-short--${size}`) }, (htmlSize ? { size: Number(htmlSize) } : {}))),
                (value !== null && value !== void 0 ? value : internalValue) && clearButton && (React.createElement("button", { type: "button", onClick: (e) => handleClear({ trigger: "Click", event: e }), className: "navds-search__button-clear" },
                    React.createElement("span", { className: "navds-sr-only" }, clearButtonLabel ? clearButtonLabel : "Tøm"),
                    React.createElement(XMarkIcon, { "aria-hidden": true })))),
            React.createElement(SearchContext.Provider, { value: {
                    size,
                    disabled: inputProps.disabled,
                    variant,
                    handleClick,
                } }, children ? children : variant !== "simple" && React.createElement(SearchButton, null))),
        React.createElement("div", { className: "navds-form-field__error", id: errorId, "aria-relevant": "additions removals", "aria-live": "polite" }, showErrorMsg && (React.createElement(ErrorMessage, { size: size }, props.error)))));
});
Search.Button = SearchButton;
export default Search;
//# sourceMappingURL=Search.js.map