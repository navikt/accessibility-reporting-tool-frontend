/// <reference types="react" />
import { Component, ComponentTranslation, TranslationDictionary } from "./i18n.types.js";
import nb from "./locales/nb.js";
export declare const I18nContext: import("react").Context<TranslationDictionary | TranslationDictionary[]>;
type NestedKeyOf<ObjectType extends object> = {
    [Key in keyof ObjectType & (string | number)]: ObjectType[Key] extends object ? `${Key}.${NestedKeyOf<ObjectType[Key]>}` : `${Key}`;
}[keyof ObjectType & (string | number)];
export declare function useI18n<T extends Component>(componentName: T, ...local: (ComponentTranslation<T> | undefined)[]): (keypath: NestedKeyOf<(typeof nb)[T]>, options?: {
    replacements: Record<string, string | number>;
}) => string;
export {};
