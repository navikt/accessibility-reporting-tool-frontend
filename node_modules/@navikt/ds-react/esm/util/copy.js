var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export default function copy(text) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield navigator.clipboard.writeText(text);
        }
        catch (err) {
            if (process.env.NODE_ENV !== "production") {
                console.error("Unable to copy using Clipboard API", err);
            }
            // Fallback for browsers that do not support the Clipboard API.
            const copyKey = /mac os x/i.test(navigator.userAgent) ? "âŒ˜" : "Ctrl";
            const message = `Kopier til utklippstavle: ${copyKey}+C, Enter`;
            window.prompt(message, text);
        }
    });
}
//# sourceMappingURL=copy.js.map