var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// https://github.com/radix-ui/primitives/blob/main/packages/react/slot/src/Slot.tsx
import * as React from "react";
import { mergeRefs } from "./hooks/useMergeRefs.js";
export const Slot = React.forwardRef((props, forwardedRef) => {
    var _a;
    const { children } = props, slotProps = __rest(props, ["children"]);
    if (React.isValidElement(children)) {
        return React.cloneElement(children, Object.assign(Object.assign({}, mergeProps(slotProps, children.props)), { ref: forwardedRef
                ? mergeRefs([forwardedRef, children.ref])
                : children.ref }));
    }
    if (React.Children.count(children) > 1) {
        const error = new Error("Aksel: Components using 'asChild' expects to recieve a single React element child.");
        error.name = "SlotError";
        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, error, Slot);
        throw error;
    }
    return null;
});
function mergeProps(slotProps, childProps) {
    // all child props should override
    const overrideProps = Object.assign({}, childProps);
    for (const propName in childProps) {
        const slotPropValue = slotProps[propName];
        const childPropValue = childProps[propName];
        const isHandler = /^on[A-Z]/.test(propName);
        if (isHandler) {
            // if the handler exists on both, we compose them
            if (slotPropValue && childPropValue) {
                overrideProps[propName] = (...args) => {
                    childPropValue(...args);
                    slotPropValue(...args);
                };
            }
            // but if it exists only on the slot, we use only this one
            else if (slotPropValue) {
                overrideProps[propName] = slotPropValue;
            }
        }
        // if it's `style`, we merge them
        else if (propName === "style") {
            overrideProps[propName] = Object.assign(Object.assign({}, slotPropValue), childPropValue);
        }
        else if (propName === "className") {
            overrideProps[propName] = [slotPropValue, childPropValue]
                .filter(Boolean)
                .join(" ");
        }
    }
    return Object.assign(Object.assign({}, slotProps), overrideProps);
}
//# sourceMappingURL=Slot.js.map