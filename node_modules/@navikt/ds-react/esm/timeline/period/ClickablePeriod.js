import { FloatingFocusManager, autoUpdate, arrow as flArrow, flip, offset, safePolygon, shift, useDismiss, useFloating, useFocus, useHover, useInteractions, useRole, } from "@floating-ui/react";
import cl from "clsx";
import React, { useRef, useState } from "react";
import { useMergeRefs } from "../../util/hooks/useMergeRefs.js";
import { usePeriodContext } from "../hooks/usePeriodContext.js";
import { useRowContext } from "../hooks/useRowContext.js";
import { useTimelineContext } from "../hooks/useTimelineContext.js";
import { ariaLabel, getConditionalClasses } from "../utils/period.js";
const ClickablePeriod = React.memo(({ onSelectPeriod, start, end, status, cropped, direction, left, width, icon, children, isActive, statusLabel, restProps, periodRef, }) => {
    const [open, setOpen] = useState(false);
    const { index } = useRowContext();
    const { firstFocus } = usePeriodContext();
    const { initiate, addFocusable } = useTimelineContext();
    const arrowRef = useRef(null);
    const { context, placement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, refs, floatingStyles, } = useFloating({
        placement: "top",
        open,
        onOpenChange: (_open) => setOpen(_open),
        whileElementsMounted: autoUpdate,
        middleware: [
            offset(16),
            shift(),
            flip({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            flArrow({ element: arrowRef, padding: 5 }),
        ],
    });
    const hover = useHover(context, {
        handleClose: safePolygon(),
        restMs: 25,
        delay: { open: 1000 },
        move: false,
    });
    const focus = useFocus(context);
    const dismiss = useDismiss(context);
    const role = useRole(context, { role: "dialog" });
    const { getFloatingProps, getReferenceProps } = useInteractions([
        hover,
        focus,
        dismiss,
        role,
    ]);
    const mergedRef = useMergeRefs(refs.setReference, periodRef);
    const staticSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right",
    }[placement.split("-")[0]];
    return (React.createElement(React.Fragment, null,
        React.createElement("button", Object.assign({}, restProps, { type: "button", ref: (r) => {
                firstFocus && addFocusable(r, index);
                mergedRef(r);
            }, "aria-label": ariaLabel(start, end, status, statusLabel), className: cl("navds-timeline__period--clickable", getConditionalClasses(cropped, direction, status), restProps === null || restProps === void 0 ? void 0 : restProps.className, {
                "navds-timeline__period--selected": isActive,
            }), "aria-expanded": children ? open : undefined, "aria-current": isActive || undefined }, getReferenceProps({
            onFocus: () => {
                initiate(index);
            },
            onKeyDown: (e) => {
                var _a;
                (_a = restProps === null || restProps === void 0 ? void 0 : restProps.onKeydown) === null || _a === void 0 ? void 0 : _a.call(restProps, e);
                if (e.key === "Enter") {
                    setOpen((prev) => !prev);
                }
                if (e.key === " ") {
                    onSelectPeriod === null || onSelectPeriod === void 0 ? void 0 : onSelectPeriod(e);
                    setOpen(false);
                }
            },
            style: {
                width: `${width}%`,
                [direction]: `${left}%`,
            },
            onClick: (e) => {
                var _a;
                (_a = restProps === null || restProps === void 0 ? void 0 : restProps.onClick) === null || _a === void 0 ? void 0 : _a.call(restProps, e);
                if (e.detail === 0) {
                    return;
                }
                onSelectPeriod === null || onSelectPeriod === void 0 ? void 0 : onSelectPeriod(e);
            },
        })),
            React.createElement("span", { className: "navds-timeline__period--inner" }, icon)),
        children && open && (React.createElement(FloatingFocusManager, { context: context, modal: false, initialFocus: -1, returnFocus: false },
            React.createElement("div", Object.assign({ className: "navds-timeline__popover", "data-placement": placement, ref: refs.setFloating }, getFloatingProps(), { style: floatingStyles }),
                children,
                React.createElement("div", { ref: arrowRef, style: Object.assign(Object.assign(Object.assign({}, (arrowX != null ? { left: arrowX } : {})), (arrowY != null ? { top: arrowY } : {})), (staticSide ? { [staticSide]: "-0.5rem" } : {})), className: "navds-timeline__popover-arrow" }))))));
});
export default ClickablePeriod;
//# sourceMappingURL=ClickablePeriod.js.map