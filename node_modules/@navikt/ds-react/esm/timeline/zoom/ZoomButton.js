var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { addMonths, addYears, format, isSameDay, subMonths, subYears, } from "date-fns";
import React, { forwardRef } from "react";
import { Detail } from "../../typography/Detail.js";
import { useTimelineContext } from "../hooks/useTimelineContext.js";
export const ZoomButton = forwardRef((_a, ref) => {
    var { label, interval, count } = _a, rest = __rest(_a, ["label", "interval", "count"]);
    const { setStart, endDate, startDate, direction } = useTimelineContext();
    let startOfRange;
    if (interval === "month") {
        startOfRange =
            direction === "left"
                ? subMonths(endDate, count)
                : addMonths(startDate, count);
    }
    else {
        startOfRange =
            direction === "left"
                ? subYears(endDate, count)
                : addYears(startDate, count);
    }
    const currentZoom = direction === "left"
        ? isSameDay(startDate, startOfRange)
        : isSameDay(endDate, startOfRange);
    return (React.createElement(Detail, { as: "li" },
        React.createElement("button", Object.assign({ type: "button", "aria-label": !currentZoom
                ? `Zoom tidslinjen ${format(startOfRange, "dd.MM.yyyy")} til ${format(endDate, "dd.MM.yyyy")}`
                : "Tilbakestill til initiell tidsperspektiv", ref: ref }, rest, { className: "navds-timeline__zoom-button", onClick: () => {
                setStart(startOfRange);
            }, "aria-pressed": currentZoom }), label)));
});
export default ZoomButton;
//# sourceMappingURL=ZoomButton.js.map