import { addDays, addMonths, addYears, differenceInDays, differenceInMonths, differenceInYears, endOfMonth, endOfYear, format, startOfDay, startOfMonth, startOfYear, subDays, } from "date-fns";
import { nb as nbLocale } from "date-fns/locale";
import React from "react";
import { Detail } from "../typography/Detail.js";
import { useTimelineContext } from "./hooks/useTimelineContext.js";
import { isVisible } from "./utils/index.js";
import { horizontalPositionAndWidth } from "./utils/calc.js";
export const dayLabels = (start, end, totalDays, direction, template = "dd.MM") => {
    const increment = Math.ceil(totalDays / 10);
    const lastDay = startOfDay(end);
    return new Array(totalDays)
        .fill(lastDay)
        .map((thisDay, i) => {
        if (i % increment !== 0)
            return null;
        const day = subDays(thisDay, i);
        const { horizontalPosition, width } = horizontalPositionAndWidth(day, addDays(day, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: format(day, template, { locale: nbLocale }),
            date: day,
            width,
        };
    })
        .filter((label) => label !== null);
};
export const monthLabels = (start, end, direction, template = "MMM yy") => {
    const startMonth = startOfMonth(start);
    const endMonth = endOfMonth(end);
    const numberOfMonths = differenceInMonths(endMonth, startMonth) + 1;
    return new Array(numberOfMonths).fill(startMonth).map((thisMonth, i) => {
        const month = addMonths(thisMonth, i);
        const { horizontalPosition, width } = horizontalPositionAndWidth(month, addMonths(month, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: format(month, template, { locale: nbLocale }),
            date: month,
            width,
        };
    });
};
export const yearLabels = (start, end, direction, template = "yyyy") => {
    const firstYear = startOfYear(start);
    const lastYear = endOfYear(end);
    const yearCount = differenceInYears(lastYear, start) + 1;
    return new Array(yearCount).fill(firstYear).map((thisYear, i) => {
        const year = addYears(thisYear, i);
        const { horizontalPosition, width } = horizontalPositionAndWidth(year, addYears(year, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: format(year, template, { locale: nbLocale }),
            date: year,
            width,
        };
    });
};
const axisLabels = (start, end, direction, templates) => {
    const totalDays = differenceInDays(end, start);
    if (totalDays < 40) {
        return dayLabels(start, end, totalDays, direction, templates === null || templates === void 0 ? void 0 : templates.day);
    }
    if (totalDays < 370) {
        return monthLabels(start, end, direction, templates === null || templates === void 0 ? void 0 : templates.month);
    }
    return yearLabels(start, end, direction, templates === null || templates === void 0 ? void 0 : templates.year);
};
export const AxisLabels = ({ templates, }) => {
    const { endDate, startDate, direction } = useTimelineContext();
    const labels = axisLabels(startDate, endDate, direction, templates).filter(isVisible);
    return (React.createElement("div", { className: "navds-timeline__axislabels", "aria-hidden": "true" }, labels.map((etikett) => (React.createElement(Detail, { className: "navds-timeline__axislabels-label", as: "div", key: etikett.label, style: {
            justifyContent: direction === "left" ? "flex-start" : "flex-end",
            [direction]: `${etikett.horizontalPosition}%`,
            width: `${etikett.width}%`,
        } }, etikett.label)))));
};
//# sourceMappingURL=AxisLabels.js.map