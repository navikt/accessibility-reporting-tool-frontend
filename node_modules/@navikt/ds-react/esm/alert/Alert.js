var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { CheckmarkCircleFillIcon, ExclamationmarkTriangleFillIcon, InformationSquareFillIcon, XMarkIcon, XMarkOctagonFillIcon, } from "@navikt/aksel-icons";
import { Button } from "../button/index.js";
import { BodyLong } from "../typography/index.js";
const Icon = (_a) => {
    var { variant } = _a, props = __rest(_a, ["variant"]);
    switch (variant) {
        case "error":
            return React.createElement(XMarkOctagonFillIcon, Object.assign({ title: "Feil" }, props));
        case "warning":
            return React.createElement(ExclamationmarkTriangleFillIcon, Object.assign({ title: "Advarsel" }, props));
        case "info":
            return React.createElement(InformationSquareFillIcon, Object.assign({ title: "Informasjon" }, props));
        case "success":
            return React.createElement(CheckmarkCircleFillIcon, Object.assign({ title: "Suksess" }, props));
        default:
            return null;
    }
};
/**
 * A component for displaying alerts
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/alert)
 * @see üè∑Ô∏è {@link AlertProps}
 * @example
 * ```jsx
 * <Alert variant="error">Dette er en feilmelding</Alert>
 * ```
 */
export const Alert = forwardRef((_a, ref) => {
    var { children, className, variant, size = "medium", fullWidth = false, inline = false, closeButton = false, onClose } = _a, rest = __rest(_a, ["children", "className", "variant", "size", "fullWidth", "inline", "closeButton", "onClose"]);
    return (React.createElement("div", Object.assign({}, rest, { ref: ref, className: cl(className, "navds-alert", `navds-alert--${variant}`, `navds-alert--${size}`, {
            "navds-alert--full-width": fullWidth,
            "navds-alert--inline": inline,
            "navds-alert--close-button": closeButton,
        }) }),
        React.createElement(Icon, { variant: variant, className: "navds-alert__icon" }),
        React.createElement(BodyLong, { as: "div", size: size, className: "navds-alert__wrapper" }, children),
        closeButton && !inline && (React.createElement("div", { className: "navds-alert__button-wrapper" },
            React.createElement(Button, { className: "navds-alert__button", size: "small", variant: "tertiary-neutral", onClick: onClose, type: "button", icon: React.createElement(XMarkIcon, { title: "Lukk Alert" }) })))));
});
export default Alert;
//# sourceMappingURL=Alert.js.map