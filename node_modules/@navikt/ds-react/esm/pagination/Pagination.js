var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { ChevronLeftIcon, ChevronRightIcon } from "@navikt/aksel-icons";
import { BodyShort } from "../typography/index.js";
import PaginationItem from "./PaginationItem.js";
export const getSteps = ({ page, count, boundaryCount = 1, siblingCount = 1, }) => {
    var _a, _b;
    const range = (start, end) => Array.from({ length: end - start + 1 }, (_, i) => start + i);
    if (count <= (boundaryCount + siblingCount) * 2 + 3)
        return range(1, count);
    const startPages = range(1, boundaryCount);
    const endPages = range(count - boundaryCount + 1, count);
    const siblingsStart = Math.max(Math.min(page - siblingCount, count - boundaryCount - siblingCount * 2 - 1), boundaryCount + 2);
    const siblingsEnd = siblingsStart + siblingCount * 2;
    return [
        ...startPages,
        siblingsStart - ((_a = startPages[startPages.length - 1]) !== null && _a !== void 0 ? _a : 0) === 2
            ? siblingsStart - 1
            : "ellipsis",
        ...range(siblingsStart, siblingsEnd),
        ((_b = endPages[0]) !== null && _b !== void 0 ? _b : count + 1) - siblingsEnd === 2
            ? siblingsEnd + 1
            : "ellipsis",
        ...endPages,
    ];
};
/**
 * A component that displays pagination controls.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/pagination)
 * @see 🏷️ {@link PaginationProps}
 *
 * @example
 * ```jsx
 * <Pagination
 *   page={pageState}
 *   onPageChange={(x) => setPageState(x)}
 *   count={9}
 *   boundaryCount={1}
 *   siblingCount={1}
 * />
 * ```
 */
export const Pagination = forwardRef((_a, ref) => {
    var { page, onPageChange, count, boundaryCount = 1, siblingCount = 1, className, size = "medium", prevNextTexts = false, renderItem: Item = (item) => (React.createElement(PaginationItem, Object.assign({}, item))) } = _a, rest = __rest(_a, ["page", "onPageChange", "count", "boundaryCount", "siblingCount", "className", "size", "prevNextTexts", "renderItem"]);
    if (page < 1) {
        console.error("page cannot be less than 1");
        return null;
    }
    if (count < 1) {
        console.error("count cannot be less than 1");
        return null;
    }
    if (boundaryCount < 0) {
        console.error("boundaryCount cannot be less than 0");
        return null;
    }
    if (siblingCount < 0) {
        console.error("siblingCount cannot be less than 0");
        return null;
    }
    return (React.createElement("nav", Object.assign({ ref: ref }, rest, { className: cl("navds-pagination", `navds-pagination--${size}`, className) }),
        React.createElement("ul", { className: "navds-pagination__list" },
            React.createElement("li", null,
                React.createElement(Item, { className: cl("navds-pagination__prev-next", {
                        "navds-pagination--invisible": page === 1,
                        "navds-pagination--prev-next--with-text": prevNextTexts,
                    }), disabled: page === 1, onClick: () => onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(page - 1), page: page - 1, size: size, icon: React.createElement(ChevronLeftIcon, Object.assign({ className: "navds-pagination__prev-next-icon" }, (prevNextTexts
                        ? { "aria-hidden": true }
                        : { title: "Forrige" }))) }, prevNextTexts && (React.createElement(BodyShort, { size: size === "xsmall" ? "small" : size, className: "navds-pagination__prev-text" }, "Forrige")))),
            getSteps({ page, count, siblingCount, boundaryCount }).map((step, i) => {
                const n = Number(step);
                return Number.isNaN(n) ? (React.createElement("li", { className: "navds-pagination__ellipsis", key: `${step}${i}` },
                    React.createElement(BodyShort, { size: size === "xsmall" ? "small" : size }, "..."))) : (React.createElement("li", { key: step },
                    React.createElement(Item, { onClick: () => onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(n), selected: page === n, page: n, size: size },
                        React.createElement(BodyShort, { size: size === "xsmall" ? "small" : size }, n))));
            }),
            React.createElement("li", null,
                React.createElement(Item, { className: cl("navds-pagination__prev-next", {
                        "navds-pagination--invisible": page === count,
                        "navds-pagination--prev-next--with-text": prevNextTexts,
                    }), disabled: page === count, onClick: () => onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(page + 1), page: page + 1, size: size, icon: React.createElement(ChevronRightIcon, Object.assign({ className: "navds-pagination__prev-next-icon" }, (prevNextTexts
                        ? { "aria-hidden": true }
                        : { title: "Neste" }))), iconPosition: "right" }, prevNextTexts && (React.createElement(BodyShort, { size: size === "xsmall" ? "small" : size, className: "navds-pagination__next-text" }, "Neste")))))));
});
Pagination.Item = PaginationItem;
export default Pagination;
//# sourceMappingURL=Pagination.js.map