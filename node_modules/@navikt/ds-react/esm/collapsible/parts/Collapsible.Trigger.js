var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import { Slot } from "../../util/Slot.js";
import { composeEventHandlers } from "../../util/composeEventHandlers.js";
import { useCollapsibleContext } from "../Collapsible.context.js";
export const CollapsibleTrigger = forwardRef((_a, ref) => {
    var { children, asChild, onClick } = _a, rest = __rest(_a, ["children", "asChild", "onClick"]);
    const ctx = useCollapsibleContext();
    const Comp = asChild ? Slot : "button";
    return (React.createElement(Comp, Object.assign({ ref: ref, type: "button", "data-state": ctx.state, onClick: composeEventHandlers(onClick, ctx.onOpenToggle), "aria-expanded": ctx.open }, rest, { id: ctx.triggerId, "aria-controls": ctx.open ? ctx.contentId : undefined }), children));
});
export default CollapsibleTrigger;
//# sourceMappingURL=Collapsible.Trigger.js.map