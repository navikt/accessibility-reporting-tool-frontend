var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { omit } from "../util/index.js";
import { useId } from "../util/hooks/index.js";
/**
 * A component that displays a loading spinner.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/loader)
 * @see 🏷️ {@link LoaderProps}
 *
 * @example
 * ```jsx
 * <Loader size="3xlarge" title="Venter..." />
 * ```
 */
export const Loader = forwardRef((_a, ref) => {
    var { className, size = "medium", title = "venter...", transparent = false, variant = "neutral", id } = _a, rest = __rest(_a, ["className", "size", "title", "transparent", "variant", "id"]);
    const internalId = useId();
    return (React.createElement("svg", Object.assign({ "aria-labelledby": id !== null && id !== void 0 ? id : `loader-${internalId}`, ref: ref, className: cl("navds-loader", className, `navds-loader--${size}`, `navds-loader--${variant}`, {
            "navds-loader--transparent": transparent,
        }), focusable: "false", viewBox: "0 0 50 50", preserveAspectRatio: "xMidYMid" }, omit(rest, ["children"])),
        React.createElement("title", { id: id !== null && id !== void 0 ? id : `loader-${internalId}` }, title),
        React.createElement("circle", { className: "navds-loader__background", xmlns: "http://www.w3.org/2000/svg", cx: "25", cy: "25", r: "20", fill: "none" }),
        React.createElement("circle", { className: "navds-loader__foreground", cx: "25", cy: "25", r: "20", fill: "none", strokeDasharray: "50 155" })));
});
export default Loader;
//# sourceMappingURL=Loader.js.map