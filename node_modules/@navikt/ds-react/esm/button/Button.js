var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useRef, useState } from "react";
import { Loader } from "../loader/index.js";
import { Label } from "../typography/index.js";
import { omit } from "../util/index.js";
import { composeEventHandlers } from "../util/composeEventHandlers.js";
import { useClientLayoutEffect } from "../util/hooks/index.js";
import { useMergeRefs } from "../util/hooks/useMergeRefs.js";
/**
 * A button component
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/button)
 * @see 🏷️ {@link ButtonProps}
 * @see [🤖 OverridableComponent](https://aksel.nav.no/grunnleggende/kode/overridablecomponent) support
 * @example
 * ```jsx
 * <Button>Klikk meg</Button>
 * ```
 */
export const Button = forwardRef((_a, ref) => {
    var { as: Component = "button", variant = "primary", className, children, size = "medium", loading = false, disabled, style, icon, iconPosition = "left" } = _a, rest = __rest(_a, ["as", "variant", "className", "children", "size", "loading", "disabled", "style", "icon", "iconPosition"]);
    const buttonRef = useRef(null);
    const [widthOverride, setWidthOverride] = useState();
    const mergedRef = useMergeRefs(buttonRef, ref);
    useClientLayoutEffect(() => {
        if (loading) {
            const requestID = window.requestAnimationFrame(() => {
                var _a, _b;
                setWidthOverride((_b = (_a = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width);
            });
            return () => {
                setWidthOverride(undefined);
                cancelAnimationFrame(requestID);
            };
        }
    }, [loading, children]);
    const filterProps = (disabled !== null && disabled !== void 0 ? disabled : widthOverride) ? omit(rest, ["href"]) : rest;
    const handleKeyUp = (e) => {
        if (e.key === " " && !disabled && !widthOverride) {
            e.currentTarget.click();
        }
    };
    return (React.createElement(Component, Object.assign({}, (Component !== "button" ? { role: "button" } : {}), filterProps, { ref: mergedRef, onKeyUp: composeEventHandlers(filterProps.onKeyUp, handleKeyUp), className: cl(className, "navds-button", `navds-button--${variant}`, `navds-button--${size}`, {
            "navds-button--loading": widthOverride,
            "navds-button--icon-only": !!icon && !children,
            "navds-button--disabled": disabled !== null && disabled !== void 0 ? disabled : widthOverride,
        }), style: Object.assign(Object.assign({}, style), { width: widthOverride }), disabled: (disabled !== null && disabled !== void 0 ? disabled : widthOverride) ? true : undefined }), widthOverride ? (React.createElement(Loader, { size: size })) : (React.createElement(React.Fragment, null,
        icon && iconPosition === "left" && (React.createElement("span", { className: "navds-button__icon" }, icon)),
        children && (React.createElement(Label, { as: "span", size: size === "medium" ? "medium" : "small" }, children)),
        icon && iconPosition === "right" && (React.createElement("span", { className: "navds-button__icon" }, icon))))));
});
export default Button;
//# sourceMappingURL=Button.js.map