var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { autoUpdate, arrow as flArrow, offset as flOffset, flip, shift, useFloating, } from "@floating-ui/react";
import cl from "clsx";
import React, { forwardRef, useContext, useRef } from "react";
import { DateContext } from "../date/context/index.js";
import { useModalContext } from "../modal/Modal.context.js";
import { DismissableLayer } from "../overlays/dismissablelayer/DismissableLayer.js";
import { useClientLayoutEffect } from "../util/hooks/index.js";
import { useMergeRefs } from "../util/hooks/useMergeRefs.js";
import PopoverContent from "./PopoverContent.js";
/**
 * A component that displays a popover.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/popover)
 * @see 🏷️ {@link PopoverProps}
 *
 * @example
 * ```jsx
 * <Button ref={buttonRef} onClick={() => setOpenState(true)}>
 *   Åpne popover
 * </Button>
 * <Popover
 *   open={openState}
 *   onClose={() => setOpenState(false)}
 *   anchorEl={buttonRef.current}
 * >
 *   <Popover.Content>Innhold her!</Popover.Content>
 * </Popover>
 * ```
 */
export const Popover = forwardRef((_a, ref) => {
    var { className, children, anchorEl, arrow = true, open, onClose, placement = "top", offset, strategy: userStrategy, flip: _flip = true } = _a, rest = __rest(_a, ["className", "children", "anchorEl", "arrow", "open", "onClose", "placement", "offset", "strategy", "flip"]);
    const arrowRef = useRef(null);
    const isInModal = useModalContext(false) !== undefined;
    const isInDatepicker = useContext(DateContext) !== null;
    const chosenStrategy = userStrategy !== null && userStrategy !== void 0 ? userStrategy : (isInModal ? "fixed" : "absolute");
    const chosenFlip = isInDatepicker ? false : _flip;
    const { update, refs, placement: flPlacement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, floatingStyles, } = useFloating({
        strategy: chosenStrategy,
        placement,
        open,
        middleware: [
            flOffset(offset !== null && offset !== void 0 ? offset : (arrow ? 16 : 4)),
            chosenFlip &&
                flip({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            shift({ padding: 12 }),
            flArrow({ element: arrowRef, padding: 8 }),
        ],
    });
    useClientLayoutEffect(() => {
        refs.setReference(anchorEl);
    }, [anchorEl]);
    const floatingRef = useMergeRefs(refs.setFloating, ref);
    useClientLayoutEffect(() => {
        if (!refs.reference.current || !refs.floating.current || !open)
            return;
        const cleanup = autoUpdate(refs.reference.current, refs.floating.current, update);
        return () => cleanup();
    }, [refs.floating, refs.reference, update, open, anchorEl]);
    const staticSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right",
    }[flPlacement.split("-")[0]];
    return (React.createElement(DismissableLayer, { asChild: true, safeZone: {
            anchor: anchorEl,
            dismissable: refs.floating.current,
        }, onDismiss: () => open && (onClose === null || onClose === void 0 ? void 0 : onClose()), enabled: open },
        React.createElement("div", Object.assign({ ref: floatingRef }, rest, { className: cl("navds-popover", className, {
                "navds-popover--hidden": !open || !anchorEl,
            }), style: Object.assign(Object.assign({}, rest.style), floatingStyles), "data-placement": flPlacement, "aria-hidden": !open || !anchorEl }),
            children,
            arrow && (React.createElement("div", { ref: (node) => {
                    arrowRef.current = node;
                }, style: Object.assign(Object.assign(Object.assign({}, (arrowX != null ? { left: arrowX } : {})), (arrowY != null ? { top: arrowY } : {})), (staticSide ? { [staticSide]: "-0.5rem" } : {})), className: "navds-popover__arrow" })))));
});
Popover.Content = PopoverContent;
export default Popover;
//# sourceMappingURL=Popover.js.map