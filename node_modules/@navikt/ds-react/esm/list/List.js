var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useContext } from "react";
import { BodyShort, Heading } from "../typography/index.js";
import { useId } from "../util/hooks/index.js";
import { ListItem } from "./ListItem.js";
import { ListContext } from "./context.js";
/**
 * A list component
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/list)
 * @see 🏷️ {@link ListProps | Props}
 *
 * @example
 * ```jsx
 * <List>
 *   <List.Item>Coffee</List.Item>
 *   <List.Item>Tea</List.Item>
 *   <List.Item>Milk</List.Item>
 * </List>
 * ```
 */
export const List = forwardRef((_a, ref) => {
    var _b;
    var { children, className, as: ListTag = "ul", title, description, headingTag = "h3", size } = _a, rest = __rest(_a, ["children", "className", "as", "title", "description", "headingTag", "size"]);
    const ariaId = useId();
    const { isNested, size: _size } = useContext(ListContext);
    const listSize = (_b = size !== null && size !== void 0 ? size : _size) !== null && _b !== void 0 ? _b : "medium";
    return (React.createElement(ListContext.Provider, { value: {
            listType: ListTag,
            isNested: isNested === null ? false : true,
            size: listSize,
        } },
        React.createElement("div", Object.assign({}, rest, { ref: ref, className: cl("navds-list", `navds-list--${listSize}`, className, {
                "navds-list--nested": isNested === null ? false : true,
            }) }),
            title && (React.createElement(Heading, { id: `tittel-${ariaId}`, size: listSize === "medium" ? "small" : "xsmall", as: headingTag }, title)),
            description && (React.createElement(BodyShort, { size: listSize, id: `description-${ariaId}` }, description)),
            React.createElement(ListTag, { "aria-labelledby": title && `tittel-${ariaId}`, "aria-describedby": description && `description-${ariaId}` }, children))));
});
List.Item = ListItem;
export default List;
//# sourceMappingURL=List.js.map