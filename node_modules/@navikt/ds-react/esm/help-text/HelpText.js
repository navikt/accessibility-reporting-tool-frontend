var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef, useRef, useState } from "react";
import { Popover } from "../popover/index.js";
import { composeEventHandlers } from "../util/composeEventHandlers.js";
import { useMergeRefs } from "../util/hooks/useMergeRefs.js";
import { HelpTextIcon } from "./HelpTextIcon.js";
/**
 * A component that displays a help text button with a popover.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/helptext)
 * @see 🏷️ {@link HelpTextProps}
 *
 * @example
 * ```jsx
 * <HelpText title="Hvor kommer dette fra?">
 *   Informasjonen er hentet fra X sin statistikk fra 2021
 * </HelpText>
 * ```
 */
export const HelpText = forwardRef((_a, ref) => {
    var { className, children, placement, strategy = "absolute", title = "hjelp", onClick, wrapperClassName } = _a, rest = __rest(_a, ["className", "children", "placement", "strategy", "title", "onClick", "wrapperClassName"]);
    const buttonRef = useRef(null);
    const mergedRef = useMergeRefs(buttonRef, ref);
    const [open, setOpen] = useState(false);
    return (React.createElement("div", { className: cl("navds-help-text", wrapperClassName) },
        React.createElement("button", Object.assign({}, rest, { ref: mergedRef, onClick: composeEventHandlers(onClick, () => setOpen((x) => !x)), className: cl(className, "navds-help-text__button"), type: "button", "aria-expanded": open }),
            React.createElement(HelpTextIcon, { title: title }),
            React.createElement(HelpTextIcon, { filled: true, title: title })),
        React.createElement(Popover, { onClose: () => setOpen(false), className: "navds-help-text__popover", open: open, anchorEl: buttonRef.current, placement: placement, strategy: strategy, offset: 12 },
            React.createElement(Popover.Content, { className: "navds-body-short" }, children))));
});
export default HelpText;
//# sourceMappingURL=HelpText.js.map