var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cl from "clsx";
import React, { forwardRef } from "react";
import { ChevronDownIcon } from "@navikt/aksel-icons";
import { composeEventHandlers } from "../util/composeEventHandlers.js";
import { useId } from "../util/hooks/index.js";
import { useControllableState } from "../util/hooks/useControllableState.js";
import AnimateHeight from "./AnimateHeight.js";
import DataCell from "./DataCell.js";
import Row from "./Row.js";
export const ExpandableRow = forwardRef((_a, ref) => {
    var { className, children, content, togglePlacement = "left", defaultOpen = false, open, onOpenChange, expansionDisabled = false, expandOnRowClick = false, colSpan = 999, onClick } = _a, rest = __rest(_a, ["className", "children", "content", "togglePlacement", "defaultOpen", "open", "onOpenChange", "expansionDisabled", "expandOnRowClick", "colSpan", "onClick"]);
    const [_open, _setOpen] = useControllableState({
        defaultValue: defaultOpen,
        value: open,
        onChange: onOpenChange,
    });
    const id = useId();
    const expansionHandler = (e) => {
        _setOpen((x) => !x);
        e.stopPropagation();
    };
    const onRowClick = (e) => !isInteractiveTarget(e.target) && expansionHandler(e);
    const handleRowClick = (e) => {
        !expansionDisabled && expandOnRowClick && onRowClick(e);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Row, Object.assign({}, rest, { ref: ref, className: cl("navds-table__expandable-row", className, {
                "navds-table__expandable-row--open": _open,
                "navds-table__expandable-row--expansion-disabled": expansionDisabled,
                "navds-table__expandable-row--clickable": expandOnRowClick,
            }), onClick: composeEventHandlers(onClick, handleRowClick) }),
            togglePlacement === "right" && children,
            React.createElement(DataCell, { className: cl("navds-table__toggle-expand-cell", {
                    "navds-table__toggle-expand-cell--open": _open,
                }) }, !expansionDisabled && (React.createElement("button", { className: "navds-table__toggle-expand-button", type: "button", "aria-controls": id, "aria-expanded": _open, onClick: expansionHandler },
                React.createElement(ChevronDownIcon, { className: "navds-table__expandable-icon", title: _open ? "Vis mindre" : "Vis mer" })))),
            togglePlacement === "left" && children),
        React.createElement("tr", { className: "navds-table__expanded-row", "aria-hidden": !_open, id: id },
            React.createElement("td", { colSpan: colSpan, className: "navds-table__expanded-row-cell" },
                React.createElement(AnimateHeight, { className: "navds-table__expanded-row-collapse", innerClassName: "navds-table__expanded-row-content", height: _open ? "auto" : 0, duration: 250 }, content)))));
});
function isInteractiveTarget(elm) {
    if (elm.nodeName === "TD" || elm.nodeName === "TH" || !elm.parentElement) {
        return false;
    }
    if (["BUTTON", "DETAILS", "LABEL", "SELECT", "TEXTAREA", "INPUT", "A"].includes(elm.nodeName)) {
        return true;
    }
    return isInteractiveTarget(elm.parentElement);
}
export default ExpandableRow;
//# sourceMappingURL=ExpandableRow.js.map