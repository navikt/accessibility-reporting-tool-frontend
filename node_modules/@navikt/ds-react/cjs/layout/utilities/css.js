"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResponsiveProps = exports.getResponsiveValue = void 0;
function getResponsiveValue(componentName, componentProp, responsiveProp) {
    if (!responsiveProp) {
        return {};
    }
    if (typeof responsiveProp === "string") {
        return {
            [`--__ac-${componentName}-${componentProp}-xs`]: responsiveProp,
        };
    }
    return Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [
        `--__ac-${componentName}-${componentProp}-${breakpointAlias}`,
        responsiveValue,
    ]));
}
exports.getResponsiveValue = getResponsiveValue;
const translateExceptionToCSS = (exception) => {
    switch (exception) {
        case "px":
            return "1px";
    }
    return exception;
};
const translateTokenStringToCSS = (componentProp, tokenString, tokenSubgroup, tokenExceptions, invert) => {
    return tokenString
        .split(" ")
        .map((x, _, arr) => {
        if (componentProp === "margin-inline" && x === "full") {
            const width = 100 / arr.length;
            return `calc((100vw - ${width}%)/-2)`;
        }
        if (componentProp === "padding-inline" && x === "full") {
            const width = 100 / arr.length;
            return `calc((100vw - ${width}%)/2)`;
        }
        let output = `var(--a-${tokenSubgroup}-${x})`;
        if (tokenExceptions.includes(x)) {
            output = translateExceptionToCSS(x);
        }
        if (invert) {
            if (x === "0") {
                return `0`;
            }
            return `calc(-1 * ${output})`;
        }
        return output;
    })
        .join(" ");
};
function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp, invert = false, tokenExceptions = []) {
    if (!responsiveProp) {
        return {};
    }
    if (typeof responsiveProp === "string") {
        return {
            [`--__ac-${componentName}-${componentProp}-xs`]: translateTokenStringToCSS(componentProp, responsiveProp, tokenSubgroup, tokenExceptions, invert),
        };
    }
    const styleProps = {};
    Object.entries(responsiveProp).forEach(([breakpointAlias, aliasOrScale]) => {
        styleProps[`--__ac-${componentName}-${componentProp}-${breakpointAlias}`] =
            translateTokenStringToCSS(componentProp, aliasOrScale, tokenSubgroup, tokenExceptions, invert);
    });
    return styleProps;
}
exports.getResponsiveProps = getResponsiveProps;
//# sourceMappingURL=css.js.map