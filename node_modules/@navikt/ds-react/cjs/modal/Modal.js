"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = void 0;
const react_1 = require("@floating-ui/react");
const clsx_1 = __importDefault(require("clsx"));
const react_2 = __importStar(require("react"));
const react_dom_1 = require("react-dom");
const context_1 = require("../date/context");
const Provider_1 = require("../provider/Provider");
const typography_1 = require("../typography");
const composeEventHandlers_1 = require("../util/composeEventHandlers");
const hooks_1 = require("../util/hooks");
const useMergeRefs_1 = require("../util/hooks/useMergeRefs");
const Modal_context_1 = require("./Modal.context");
const ModalBody_1 = __importDefault(require("./ModalBody"));
const ModalFooter_1 = __importDefault(require("./ModalFooter"));
const ModalHeader_1 = __importDefault(require("./ModalHeader"));
const ModalUtils_1 = require("./ModalUtils");
const dialog_polyfill_1 = __importStar(require("./dialog-polyfill"));
const polyfillClassName = "navds-modal--polyfilled";
/**
 * A component that displays a modal dialog.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/modal)
 * @see 🏷️ {@link ModalProps}
 *
 * @example
 * State change with `useRef`
 * ```jsx
 * const ref = useRef<HTMLDialogElement>(null);
 * <Button onClick={() => ref.current?.showModal()}>Open modal</Button>
 * <Modal
 *   ref={ref}
 *   header={{
 *     label: "Optional label",
 *     icon: <FileIcon aria-hidden />,
 *     heading: "My heading",
 *   }}
 * >
 *   <Modal.Body>
 *     <BodyLong>Hello world</BodyLong>
 *   </Modal.Body>
 *   <Modal.Footer>
 *     <Button>Save</Button>
 *     <Button type="button" variant="tertiary" onClick={() => ref.current?.close()}>Close</Button>
 *   </Modal.Footer>
 * </Modal>
 * ```
 * @example
 * State change with `useState`
 * ```jsx
 * const [open, setOpen] = useState(false);
 * <Modal
 *   open={open}
 *   onClose={() => setOpen(false)}
 *   aria-labelledby="modal-heading"
 * >
 *   <Modal.Header>
 *     <Heading level="1" size="large" id="modal-heading">My heading</Heading>
 *   </Modal.Header>
 *   <Modal.Body>
 *     <BodyLong>Hello world</BodyLong>
 *   </Modal.Body>
 * </Modal>
 * ```
 */
exports.Modal = (0, react_2.forwardRef)((_a, ref) => {
    var _b, _c;
    var { header, children, open, onBeforeClose, onCancel, closeOnBackdropClick, width, portal, className, "aria-labelledby": ariaLabelledby, style, onClick, onMouseDown } = _a, rest = __rest(_a, ["header", "children", "open", "onBeforeClose", "onCancel", "closeOnBackdropClick", "width", "portal", "className", "aria-labelledby", "style", "onClick", "onMouseDown"]);
    const modalRef = (0, react_2.useRef)(null);
    const mergedRef = (0, useMergeRefs_1.useMergeRefs)(modalRef, ref);
    const ariaLabelId = (0, hooks_1.useId)();
    const rootElement = (_b = (0, Provider_1.useProvider)()) === null || _b === void 0 ? void 0 : _b.rootElement;
    const portalNode = (0, react_1.useFloatingPortalNode)({ root: rootElement });
    const dateContext = (0, react_2.useContext)(context_1.DateContext);
    const isNested = (0, Modal_context_1.useModalContext)(false) !== undefined;
    if (isNested && !dateContext) {
        console.error("Modals should not be nested");
    }
    (0, react_2.useEffect)(() => {
        // If using portal, modalRef.current will not be set before portalNode is set.
        // If not using portal, modalRef.current is available first.
        // We check both to avoid activating polyfill twice when not using portal.
        if (dialog_polyfill_1.needPolyfill && modalRef.current && portalNode) {
            dialog_polyfill_1.default.registerDialog(modalRef.current);
            // Force-add the "polyfilled" class in case of SSR (needPolyfill will always be false on the server)
            modalRef.current.classList.add(polyfillClassName);
        }
        // We set autofocus on the dialog element to prevent the default behavior where first focusable element gets focus when modal is opened.
        // This is mainly to fix an edge case where having a Tooltip as the first focusable element would make it activate when you open the modal.
        // We have to use JS because it doesn't work to set it with a prop (React bug?)
        // Currently doesn't seem to work in Chrome. See also Tooltip.tsx
        if (modalRef.current && portalNode)
            modalRef.current.autofocus = true;
    }, [modalRef, portalNode]);
    (0, react_2.useEffect)(() => {
        // We need to have this in a useEffect so that the content renders before the modal is displayed,
        // and in case `open` is true initially.
        // We need to check both modalRef.current and portalNode to make sure the polyfill has been activated.
        if (modalRef.current && portalNode && open !== undefined) {
            if (open && !modalRef.current.open) {
                modalRef.current.showModal();
            }
            else if (!open && modalRef.current.open) {
                modalRef.current.close();
            }
        }
    }, [modalRef, portalNode, open]);
    (0, ModalUtils_1.useBodyScrollLock)(modalRef, portalNode, isNested);
    const isWidthPreset = typeof width === "string" && ["small", "medium"].includes(width);
    const mergedClassName = (0, clsx_1.default)("navds-modal", className, {
        polyfillClassName: dialog_polyfill_1.needPolyfill,
        "navds-modal--autowidth": !width,
        [`navds-modal--${width}`]: isWidthPreset,
    });
    const mergedStyle = Object.assign(Object.assign({}, style), (!isWidthPreset ? { width } : {}));
    const mouseClickStart = (0, react_2.useRef)({
        clientX: 0,
        clientY: 0,
    });
    const handleModalMouseDown = (event) => {
        mouseClickStart.current = event;
    };
    const shouldHandleModalClick = closeOnBackdropClick && !dialog_polyfill_1.needPolyfill;
    /**
     * `closeOnBackdropClick` has issues on polyfill when nesting modals (DatePicker)
     */
    const handleModalClick = (endEvent) => {
        if (endEvent.target !== modalRef.current) {
            return;
        }
        const modalRect = modalRef.current.getBoundingClientRect();
        if ((0, ModalUtils_1.coordsAreInside)(mouseClickStart.current, modalRect) ||
            (0, ModalUtils_1.coordsAreInside)(endEvent, modalRect)) {
            return;
        }
        if (onBeforeClose !== undefined && onBeforeClose() === false) {
            return;
        }
        modalRef.current.close();
    };
    /**
     * onCancel fires when you press `Esc`
     */
    const handleModalCancel = (event) => {
        onBeforeClose && onBeforeClose() === false && event.preventDefault();
    };
    const mergedAriaLabelledBy = !ariaLabelledby && !rest["aria-label"] && header
        ? ariaLabelId
        : ariaLabelledby;
    const component = (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
    react_2.default.createElement("dialog", Object.assign({}, rest, { ref: mergedRef, className: mergedClassName, style: mergedStyle, onCancel: (0, composeEventHandlers_1.composeEventHandlers)(onCancel, handleModalCancel), onClick: shouldHandleModalClick
            ? (0, composeEventHandlers_1.composeEventHandlers)(onClick, handleModalClick)
            : onClick, onMouseDown: shouldHandleModalClick
            ? (0, composeEventHandlers_1.composeEventHandlers)(onMouseDown, handleModalMouseDown)
            : onMouseDown, "aria-labelledby": mergedAriaLabelledBy }),
        react_2.default.createElement(Modal_context_1.ModalContextProvider, { closeHandler: (0, ModalUtils_1.getCloseHandler)(modalRef, header, onBeforeClose), ref: modalRef },
            header && (react_2.default.createElement(ModalHeader_1.default, null,
                header.label && (react_2.default.createElement(typography_1.Detail, { className: "navds-modal__label" }, header.label)),
                react_2.default.createElement(typography_1.Heading, { size: (_c = header.size) !== null && _c !== void 0 ? _c : "medium", level: "1", id: ariaLabelId },
                    header.icon && (react_2.default.createElement("span", { className: "navds-modal__header-icon" }, header.icon)),
                    header.heading))),
            children)));
    if (portal) {
        if (portalNode)
            return (0, react_dom_1.createPortal)(component, portalNode);
        return null;
    }
    return component;
});
exports.Modal.Header = ModalHeader_1.default;
exports.Modal.Body = ModalBody_1.default;
exports.Modal.Footer = ModalFooter_1.default;
exports.default = exports.Modal;
//# sourceMappingURL=Modal.js.map