"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyButton = void 0;
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const aksel_icons_1 = require("@navikt/aksel-icons");
const typography_1 = require("../typography");
const composeEventHandlers_1 = require("../util/composeEventHandlers");
const copy_1 = __importDefault(require("../util/copy"));
/**
 * A button component that copies text to the clipboard when clicked.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/copybutton)
 * @see 🏷️ {@link CopyButtonProps}
 *
 * @example
 * ```jsx
      <CopyButton copyText="3.14" />
 * ```
 */
exports.CopyButton = (0, react_1.forwardRef)((_a, ref) => {
    var { className, copyText, text, activeText = "Kopiert!", variant = "neutral", size = "medium", onActiveChange, icon, activeIcon, activeDuration = 2000, title = "Kopier", activeTitle = "Kopiert", iconPosition = "left", onClick } = _a, rest = __rest(_a, ["className", "copyText", "text", "activeText", "variant", "size", "onActiveChange", "icon", "activeIcon", "activeDuration", "title", "activeTitle", "iconPosition", "onClick"]);
    const [active, setActive] = (0, react_1.useState)(false);
    const timeoutRef = (0, react_1.useRef)();
    (0, react_1.useEffect)(() => {
        return () => {
            timeoutRef.current && clearTimeout(timeoutRef.current);
        };
    }, []);
    const handleClick = () => {
        timeoutRef.current && clearTimeout(timeoutRef.current);
        (0, copy_1.default)(copyText);
        setActive(true);
        onActiveChange === null || onActiveChange === void 0 ? void 0 : onActiveChange(true);
        timeoutRef.current = window.setTimeout(() => {
            setActive(false);
            onActiveChange === null || onActiveChange === void 0 ? void 0 : onActiveChange(false);
        }, activeDuration);
    };
    const copyIcon = (react_1.default.createElement("span", { className: "navds-copybutton__icon" }, active
        ? activeIcon !== null && activeIcon !== void 0 ? activeIcon : (react_1.default.createElement(aksel_icons_1.CheckmarkIcon, { "aria-hidden": !!text, title: text ? undefined : activeTitle }))
        : icon !== null && icon !== void 0 ? icon : (react_1.default.createElement(aksel_icons_1.FilesIcon, { "aria-hidden": !!text, title: text ? undefined : title }))));
    return (react_1.default.createElement("button", Object.assign({ ref: ref, type: "button" }, rest, { "aria-live": "polite", className: (0, clsx_1.default)("navds-copybutton", className, `navds-copybutton--${size}`, `navds-copybutton--${variant}`, {
            "navds-copybutton--icon-only": !text,
            "navds-copybutton--icon-right": iconPosition === "right",
            "navds-copybutton--active": active,
        }), onClick: (0, composeEventHandlers_1.composeEventHandlers)(onClick, handleClick) }),
        react_1.default.createElement("span", { className: "navds-copybutton__content" },
            iconPosition === "left" && copyIcon,
            text &&
                (active ? (react_1.default.createElement(typography_1.Label, { as: "span", size: size === "medium" ? "medium" : "small", "aria-live": "polite" }, activeText)) : (react_1.default.createElement(typography_1.Label, { as: "span", size: size === "medium" ? "medium" : "small", "aria-live": "polite" }, text))),
            iconPosition === "right" && copyIcon)));
});
exports.default = exports.CopyButton;
//# sourceMappingURL=CopyButton.js.map