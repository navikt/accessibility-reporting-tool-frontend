"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpansionCard = void 0;
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const hooks_1 = require("../util/hooks");
const ExpansionCardContent_1 = __importDefault(require("./ExpansionCardContent"));
const ExpansionCardDescription_1 = require("./ExpansionCardDescription");
const ExpansionCardHeader_1 = __importDefault(require("./ExpansionCardHeader"));
const ExpansionCardTitle_1 = require("./ExpansionCardTitle");
const context_1 = require("./context");
/**
 * A component that displays an expandable card.
 *
 * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/expansioncard)
 * @see 🏷️ {@link ExpansionCardProps}
 *
 * @example
 * ```jsx
 * <ExpansionCard aria-label="default-demo">
 *   <ExpansionCard.Header>
 *     <ExpansionCard.Title>Utbetaling av sykepenger</ExpansionCard.Title>
 *   </ExpansionCard.Header>
 *   <ExpansionCard.Content>
 *     <Innhold />
 *   </ExpansionCard.Content>
 * </ExpansionCard>
 * ```
 */
exports.ExpansionCard = (0, react_1.forwardRef)((_a, ref) => {
    var { className, onToggle, open, defaultOpen = false, size = "medium" } = _a, rest = __rest(_a, ["className", "onToggle", "open", "defaultOpen", "size"]);
    const shouldFade = (0, react_1.useRef)(!(Boolean(open) || defaultOpen));
    const [_open, _setOpen] = (0, hooks_1.useControllableState)({
        value: open,
        onChange: (newValue) => {
            onToggle === null || onToggle === void 0 ? void 0 : onToggle(newValue);
            shouldFade.current = true;
        },
        defaultValue: defaultOpen,
    });
    return (react_1.default.createElement(context_1.ExpansionCardContext.Provider, { value: {
            open: open !== null && open !== void 0 ? open : _open,
            toggleOpen: () => _setOpen((x) => !x),
            size,
        } },
        react_1.default.createElement("section", Object.assign({}, rest, { className: (0, clsx_1.default)("navds-expansioncard", className, `navds-expansioncard--${size}`, {
                "navds-expansioncard--open": open !== null && open !== void 0 ? open : _open,
                "navds-expansioncard--no-animation": !shouldFade.current,
            }), ref: ref }))));
});
exports.ExpansionCard.Header = ExpansionCardHeader_1.default;
exports.ExpansionCard.Content = ExpansionCardContent_1.default;
exports.ExpansionCard.Title = ExpansionCardTitle_1.ExpansionCardTitle;
exports.ExpansionCard.Description = ExpansionCardDescription_1.ExpansionCardDescription;
exports.default = exports.ExpansionCard;
//# sourceMappingURL=ExpansionCard.js.map