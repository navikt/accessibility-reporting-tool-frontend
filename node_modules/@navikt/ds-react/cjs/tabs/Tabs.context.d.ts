/// <reference types="react" />
import { TabsProps } from "./Tabs.types";
import { useTabs } from "./useTabs";
export declare const TabsDescendantsProvider: import("react").Provider<import("../util/hooks/descendants/descendant").DescendantsManager<HTMLButtonElement, {
    value: string;
}>>, useTabsDescendantsContext: <S extends boolean = true>(strict?: S) => S extends true ? import("../util/hooks/descendants/descendant").DescendantsManager<HTMLButtonElement, {
    value: string;
}> : import("../util/hooks/descendants/descendant").DescendantsManager<HTMLButtonElement, {
    value: string;
}> | undefined, useTabsDescendants: () => import("../util/hooks/descendants/descendant").DescendantsManager<HTMLButtonElement, {
    value: string;
}>, useTabsDescendant: (options?: import("../util/hooks/descendants/descendant").DescendantOptions<{
    value: string;
}> | undefined) => {
    descendants: import("../util/hooks/descendants/descendant").DescendantsManager<HTMLButtonElement, {
        value: string;
    }>;
    index: number;
    enabledIndex: number;
    register: (instance: HTMLButtonElement | null) => void;
};
type TabsProviderProps = ReturnType<typeof useTabs> & Pick<TabsProps, "selectionFollowsFocus" | "loop" | "size" | "iconPosition" | "fill">;
export declare const TabsProvider: import("react").ForwardRefExoticComponent<{
    id: string;
    selectedValue: string;
    setSelectedValue: (next: import("react").SetStateAction<string>) => void;
    focusedValue: string;
    setFocusedValue: import("react").Dispatch<import("react").SetStateAction<string>>;
    makeTabId: (id: string, value: string) => string;
    makeTabPanelId: (id: string, value: string) => string;
} & Pick<TabsProps, "size" | "fill" | "loop" | "iconPosition" | "selectionFollowsFocus"> & {
    children: import("react").ReactNode;
} & import("react").RefAttributes<unknown>>, useTabsContext: <S extends boolean = true>(strict?: S) => S extends true ? TabsProviderProps : TabsProviderProps | undefined;
export {};
