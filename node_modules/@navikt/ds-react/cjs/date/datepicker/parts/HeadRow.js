"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWeekdays = exports.HeadRow = void 0;
const date_fns_1 = require("date-fns");
const react_1 = __importDefault(require("react"));
const react_day_picker_1 = require("react-day-picker");
const responsive_1 = require("../../../layout/responsive");
/**
 * https://github.com/gpbl/react-day-picker/tree/main/src/components/HeadRow
 */
function HeadRow() {
    const { classNames, styles, showWeekNumber, locale, formatters: { formatWeekdayName }, labels: { labelWeekday }, } = (0, react_day_picker_1.useDayPicker)();
    const weekdays = getWeekdays(locale);
    return (react_1.default.createElement("tr", { style: styles.head_row, className: classNames.head_row },
        showWeekNumber && (react_1.default.createElement(responsive_1.Hide, { below: "sm", asChild: true },
            react_1.default.createElement("td", { style: styles.head_cell, className: classNames.head_cell }))),
        weekdays.map((weekday, i) => (react_1.default.createElement("th", { key: i, scope: "col", className: classNames.head_cell, style: styles.head_cell, "aria-label": labelWeekday(weekday, { locale }) }, formatWeekdayName(weekday, { locale }))))));
}
exports.HeadRow = HeadRow;
/**
 * Generate a series of 7 days, starting from the week, to use for formatting
 * the weekday names (Monday, Tuesday, etc.).
 */
function getWeekdays(locale) {
    const start = (0, date_fns_1.startOfWeek)(new Date(), { locale, weekStartsOn: 1 });
    const days = [];
    for (let i = 0; i < 7; i++) {
        const day = (0, date_fns_1.addDays)(start, i);
        days.push(day);
    }
    return days;
}
exports.getWeekdays = getWeekdays;
//# sourceMappingURL=HeadRow.js.map