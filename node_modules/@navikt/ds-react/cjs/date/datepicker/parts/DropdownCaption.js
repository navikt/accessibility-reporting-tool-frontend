"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownCaption = void 0;
const date_fns_1 = require("date-fns");
const react_1 = __importDefault(require("react"));
const react_day_picker_1 = require("react-day-picker");
const aksel_icons_1 = require("@navikt/aksel-icons");
const button_1 = require("../../../button");
const select_1 = require("../../../form/select");
const get_dates_1 = require("../../utils/get-dates");
const labels_1 = require("../../utils/labels");
const WeekRow_1 = __importDefault(require("./WeekRow"));
/**
 * https://github.com/gpbl/react-day-picker/tree/main/src/components/CaptionDropdowns
 */
const DropdownCaption = ({ displayMonth, id }) => {
    const { goToMonth, nextMonth, previousMonth } = (0, react_day_picker_1.useNavigation)();
    const { fromDate, toDate, formatters: { formatYearCaption, formatMonthCaption, formatCaption }, labels: { labelPrevious, labelNext }, locale, } = (0, react_day_picker_1.useDayPicker)();
    if (!fromDate || !toDate) {
        console.warn("Using dropdownCaption required fromDate and toDate");
        return null;
    }
    const handleYearChange = (e) => {
        const newMonth = (0, date_fns_1.setYear)((0, date_fns_1.startOfMonth)(displayMonth), Number(e.target.value));
        goToMonth((0, date_fns_1.startOfMonth)((0, date_fns_1.min)([(0, date_fns_1.max)([newMonth, fromDate]), toDate])));
    };
    const handleMonthChange = (e) => goToMonth((0, date_fns_1.setMonth)((0, date_fns_1.startOfMonth)(displayMonth), Number(e.target.value)));
    const years = (0, get_dates_1.getYears)(fromDate, toDate, displayMonth.getFullYear()).reverse();
    const months = (0, get_dates_1.getMonths)(fromDate, toDate, displayMonth);
    const previousLabel = labelPrevious(previousMonth, { locale });
    const nextLabel = labelNext(nextMonth, { locale });
    const yearDropdownLabel = (0, labels_1.labelYearDropdown)(locale);
    const MonthDropdownLabel = (0, labels_1.labelMonthDropdown)(locale);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", { className: "navds-date__caption" },
            react_1.default.createElement("span", { "aria-live": "polite", "aria-atomic": "true", id: id, className: "navds-sr-only" }, formatCaption(displayMonth, { locale })),
            react_1.default.createElement(button_1.Button, { variant: "tertiary", disabled: !previousMonth, onClick: () => previousMonth && goToMonth(previousMonth), icon: react_1.default.createElement(aksel_icons_1.ArrowLeftIcon, { title: previousLabel }), className: "navds-date__caption-button", type: "button" }),
            react_1.default.createElement("div", { className: "navds-date__caption" },
                react_1.default.createElement(select_1.Select, { label: MonthDropdownLabel, hideLabel: true, className: "navds-date__caption__month", value: displayMonth.getMonth(), onChange: handleMonthChange }, months.map((m) => (react_1.default.createElement("option", { key: m.getMonth(), value: m.getMonth() }, formatMonthCaption(m, { locale }))))),
                react_1.default.createElement(select_1.Select, { label: yearDropdownLabel, hideLabel: true, value: displayMonth.getFullYear(), onChange: handleYearChange, className: "navds-date__caption__year" }, years.map((year) => (react_1.default.createElement("option", { key: year.getFullYear(), value: year.getFullYear() }, formatYearCaption(year, { locale })))))),
            react_1.default.createElement(button_1.Button, { icon: react_1.default.createElement(aksel_icons_1.ArrowRightIcon, { title: nextLabel }), onClick: () => nextMonth && goToMonth(nextMonth), disabled: !nextMonth, variant: "tertiary", className: "navds-date__caption-button", type: "button" })),
        react_1.default.createElement(WeekRow_1.default, { displayMonth: displayMonth })));
};
exports.DropdownCaption = DropdownCaption;
exports.default = exports.DropdownCaption;
//# sourceMappingURL=DropdownCaption.js.map