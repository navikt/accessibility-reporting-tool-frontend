"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedMonthProvider = exports.useSharedMonthContext = exports.SharedMonthContext = void 0;
const date_fns_1 = require("date-fns");
const react_1 = __importStar(require("react"));
const react_day_picker_1 = require("react-day-picker");
const utils_1 = require("../utils");
exports.SharedMonthContext = (0, react_1.createContext)({
    hasDropdown: false,
    year: new Date(),
    toYear: () => null,
    disabled: [],
    onSelect: () => null,
});
const useSharedMonthContext = () => (0, react_1.useContext)(exports.SharedMonthContext);
exports.useSharedMonthContext = useSharedMonthContext;
const SharedMonthProvider = ({ children, dropdownCaption, disabled, selected, onSelect, year: _year, onYearChange, }) => {
    const context = (0, react_day_picker_1.useDayPicker)();
    const [year, toYear] = (0, react_1.useState)((0, utils_1.getInitialYear)(context));
    const hasDropdown = !!(dropdownCaption && context.fromDate && context.toDate);
    if (context.fromDate &&
        context.toDate &&
        (context === null || context === void 0 ? void 0 : context.fromDate) >= (context === null || context === void 0 ? void 0 : context.toDate)) {
        console.warn("fromDate needs to be before toDate - MonthPicker");
    }
    return (react_1.default.createElement(exports.SharedMonthContext.Provider, { value: {
            year: _year !== null && _year !== void 0 ? _year : year,
            toYear: (y) => {
                toYear(y);
                onYearChange === null || onYearChange === void 0 ? void 0 : onYearChange(y);
            },
            hasDropdown,
            disabled,
            selected,
            onSelect: (v) => v
                ? onSelect((0, date_fns_1.setYear)((0, date_fns_1.startOfMonth)(v), (_year !== null && _year !== void 0 ? _year : year).getFullYear()))
                : onSelect(undefined),
        } }, children));
};
exports.SharedMonthProvider = SharedMonthProvider;
//# sourceMappingURL=useSharedMonthContext.js.map