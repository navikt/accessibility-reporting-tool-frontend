"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthButton = void 0;
const clsx_1 = __importDefault(require("clsx"));
const date_fns_1 = require("date-fns");
const react_1 = __importStar(require("react"));
const react_day_picker_1 = require("react-day-picker");
const context_1 = require("../context");
const utils_1 = require("../utils");
const disableMonth = (month, fromDate, toDate) => {
    if (fromDate && toDate) {
        return (((0, date_fns_1.compareAsc)(month, fromDate) === -1 && !(0, date_fns_1.isSameMonth)(month, fromDate)) ||
            ((0, date_fns_1.compareDesc)(month, toDate) === -1 && !(0, date_fns_1.isSameMonth)(month, toDate)));
    }
    if (fromDate) {
        return (0, date_fns_1.compareAsc)(month, fromDate) === -1 && !(0, date_fns_1.isSameMonth)(month, fromDate);
    }
    if (toDate) {
        return (0, date_fns_1.compareDesc)(month, toDate) === -1 && !(0, date_fns_1.isSameMonth)(month, toDate);
    }
    return false;
};
const MonthButton = ({ month, months, focus, setFocus, tabRoot, setTabRoot, }) => {
    const ref = (0, react_1.useRef)(null);
    const { hasDropdown, selected, onSelect, year, toYear, disabled } = (0, context_1.useSharedMonthContext)();
    const { fromDate, toDate, locale } = (0, react_day_picker_1.useDayPicker)();
    const isSelected = selected && (0, date_fns_1.isSameMonth)(month, selected);
    (0, react_1.useEffect)(() => {
        if (focus) {
            (0, date_fns_1.isSameMonth)(month, focus) && ref.current && ref.current.focus();
            setFocus();
        }
    }, [focus, month, setFocus]);
    const isDisabled = (0, utils_1.isMatch)((0, date_fns_1.setYear)(month, year.getFullYear()), disabled) ||
        disableMonth(month, fromDate, toDate);
    return (react_1.default.createElement("button", { ref: ref, type: "button", onClick: () => onSelect(isSelected ? undefined : month), disabled: isDisabled, "aria-pressed": !!isSelected, className: (0, clsx_1.default)("navds-date__month-button", {
            "rdp-day_today": (0, utils_1.dateIsInCurrentMonth)(month, year),
            "rdp-day_selected": isSelected,
            "rdp-day_disabled": isDisabled,
        }), tabIndex: tabRoot && (0, date_fns_1.isSameMonth)(month, (0, date_fns_1.setYear)(tabRoot, year.getFullYear()))
            ? 0
            : -1, onKeyDown: (e) => {
            const next = (0, utils_1.nextEnabled)(months, e.key, disabled, month, toYear, year, hasDropdown, fromDate, toDate);
            setFocus(next);
            setTabRoot(next);
        }, onFocus: () => {
            setTabRoot(focus);
        } },
        react_1.default.createElement("span", { "aria-hidden": "true" }, (0, date_fns_1.format)(new Date(month), "LLL", { locale })
            .replace(".", "")
            .substring(0, 3)),
        react_1.default.createElement("span", { className: "navds-sr-only" }, (0, date_fns_1.format)(new Date(month), "LLLL", { locale }))));
};
exports.MonthButton = MonthButton;
exports.default = exports.MonthButton;
//# sourceMappingURL=MonthButton.js.map