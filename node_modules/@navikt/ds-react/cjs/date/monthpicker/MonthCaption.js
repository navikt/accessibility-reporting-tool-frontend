"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthCaption = void 0;
const date_fns_1 = require("date-fns");
const react_1 = __importDefault(require("react"));
const react_day_picker_1 = require("react-day-picker");
const aksel_icons_1 = require("@navikt/aksel-icons");
const button_1 = require("../../button");
const select_1 = require("../../form/select");
const context_1 = require("../context");
const utils_1 = require("../utils");
const MonthCaption = () => {
    const { fromDate, toDate, formatters: { formatYearCaption }, locale, } = (0, react_day_picker_1.useDayPicker)();
    const { hasDropdown, year, toYear } = (0, context_1.useSharedMonthContext)();
    const years = [];
    if (hasDropdown && fromDate && toDate) {
        const fromYear = fromDate.getFullYear();
        const toDateYear = toDate.getFullYear();
        for (let currYear = fromYear; currYear <= toDateYear; currYear++) {
            years.push((0, date_fns_1.setYear)((0, date_fns_1.startOfYear)(new Date()), currYear));
        }
        if (!years.map((x) => x.getFullYear()).includes(year.getFullYear())) {
            years.push((0, date_fns_1.setYear)((0, date_fns_1.startOfYear)(new Date()), year.getFullYear()));
        }
        years.sort((a, b) => b.getFullYear() - a.getFullYear());
    }
    const handleYearChange = (e) => toYear((0, date_fns_1.setYear)((0, date_fns_1.startOfMonth)(new Date()), Number(e.target.value)));
    const handleButtonClick = (val) => {
        const newYear = Number(year.getFullYear() + val);
        toYear((0, date_fns_1.setYear)(year, newYear));
    };
    const disablePreviousYear = () => {
        return fromDate
            ? (0, date_fns_1.isBefore)((year === null || year === void 0 ? void 0 : year.getFullYear()) - 1, fromDate === null || fromDate === void 0 ? void 0 : fromDate.getFullYear())
            : false;
    };
    const disableNextYear = () => {
        return toDate
            ? (0, date_fns_1.isAfter)((year === null || year === void 0 ? void 0 : year.getFullYear()) + 1, toDate === null || toDate === void 0 ? void 0 : toDate.getFullYear())
            : false;
    };
    return (react_1.default.createElement("div", { className: "navds-date__caption" },
        react_1.default.createElement(button_1.Button, { className: "navds-date__caption-button", disabled: disablePreviousYear(), onClick: () => handleButtonClick(-1), "aria-label": (0, utils_1.labelPrevYear)(locale === null || locale === void 0 ? void 0 : locale.code), icon: react_1.default.createElement(aksel_icons_1.ArrowLeftIcon, { "aria-hidden": true }), variant: "tertiary", type: "button" }),
        hasDropdown ? (react_1.default.createElement(select_1.Select, { label: "velg \u00E5r", hideLabel: true, value: year === null || year === void 0 ? void 0 : year.getFullYear(), onChange: handleYearChange, className: "navds-date__caption__year" }, years.map((yearOpt) => (react_1.default.createElement("option", { key: yearOpt.getFullYear(), value: yearOpt.getFullYear() }, formatYearCaption(yearOpt, { locale })))))) : (react_1.default.createElement("span", { className: "navds-date__year-label", "aria-live": "polite" }, year.getFullYear())),
        react_1.default.createElement(button_1.Button, { className: "navds-date__caption-button", disabled: disableNextYear(), onClick: () => handleButtonClick(1), "aria-label": (0, utils_1.labelNextYear)(locale === null || locale === void 0 ? void 0 : locale.code), icon: react_1.default.createElement(aksel_icons_1.ArrowRightIcon, { "aria-hidden": true }), variant: "tertiary", type: "button" })));
};
exports.MonthCaption = MonthCaption;
exports.default = exports.MonthCaption;
//# sourceMappingURL=MonthCaption.js.map