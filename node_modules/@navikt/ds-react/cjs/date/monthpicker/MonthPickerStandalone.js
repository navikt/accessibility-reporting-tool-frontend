"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthPickerStandalone = void 0;
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const react_day_picker_1 = require("react-day-picker");
const context_1 = require("../context");
const utils_1 = require("../utils");
const MonthCaption_1 = __importDefault(require("./MonthCaption"));
const MonthSelector_1 = __importDefault(require("./MonthSelector"));
exports.MonthPickerStandalone = (0, react_1.forwardRef)(({ dropdownCaption = false, fromDate, toDate, disabled = [], selected, className, locale = "nb", onMonthSelect, defaultSelected, year, onYearChange, }, ref) => {
    const [selectedMonth, setSelectedMonth] = (0, react_1.useState)(defaultSelected);
    const handleSelect = (month) => {
        setSelectedMonth(month);
        onMonthSelect === null || onMonthSelect === void 0 ? void 0 : onMonthSelect(month);
    };
    if (dropdownCaption && (!fromDate || !toDate)) {
        console.warn("Using dropdownCaption required fromDate and toDate");
        return null;
    }
    return (react_1.default.createElement("div", { ref: ref, className: (0, clsx_1.default)("navds-date__wrapper", className) },
        react_1.default.createElement(react_day_picker_1.DayPickerProvider, { initialProps: {
                locale: (0, utils_1.getLocaleFromString)(locale),
                selected: selected !== null && selected !== void 0 ? selected : selectedMonth,
                toDate,
                fromDate,
                month: selected !== null && selected !== void 0 ? selected : selectedMonth,
            } },
            react_1.default.createElement("div", { className: "navds-date rdp-month" },
                react_1.default.createElement(context_1.SharedMonthProvider, { dropdownCaption: dropdownCaption, disabled: disabled, selected: selected !== null && selected !== void 0 ? selected : selectedMonth, onSelect: handleSelect, year: year, onYearChange: onYearChange },
                    react_1.default.createElement(MonthCaption_1.default, null),
                    react_1.default.createElement(MonthSelector_1.default, null))))));
});
exports.default = exports.MonthPickerStandalone;
//# sourceMappingURL=MonthPickerStandalone.js.map