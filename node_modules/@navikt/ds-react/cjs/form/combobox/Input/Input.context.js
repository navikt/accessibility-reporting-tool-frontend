"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useInputContext = exports.InputContextProvider = void 0;
const react_1 = __importStar(require("react"));
const create_context_1 = require("../../../util/create-context");
const hooks_1 = require("../../../util/hooks");
const useFormField_1 = require("../../useFormField");
const [InputContextProvider, useInputContext] = (0, create_context_1.createContext)({
    name: "InputContext",
    errorMessage: "useInputContext must be used within an InputContextProvider",
});
exports.useInputContext = useInputContext;
const InputProvider = ({ children, value: props }) => {
    const { defaultValue = "", description, disabled, error, errorId, id: externalId, value: externalValue, onChange: externalOnChange, onClear, shouldAutocomplete, size, } = props;
    const formFieldProps = (0, useFormField_1.useFormField)({
        description,
        disabled,
        error,
        errorId,
        id: externalId,
        size,
    }, "comboboxfield");
    const inputRef = (0, react_1.useRef)(null);
    const toggleOpenButtonRef = (0, react_1.useRef)(null);
    const [internalValue, setInternalValue] = (0, react_1.useState)(defaultValue);
    const value = (0, react_1.useMemo)(() => String(externalValue !== null && externalValue !== void 0 ? externalValue : internalValue), [externalValue, internalValue]);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)(value);
    const onChange = (0, react_1.useCallback)((event) => {
        const newValue = event.currentTarget.value;
        externalValue !== null && externalValue !== void 0 ? externalValue : setInternalValue(newValue);
        externalOnChange === null || externalOnChange === void 0 ? void 0 : externalOnChange(event);
        setSearchTerm(newValue);
    }, [externalValue, externalOnChange]);
    const setValue = (0, react_1.useCallback)((text) => {
        setInternalValue(text);
    }, [setInternalValue]);
    const clearInput = (0, react_1.useCallback)((event) => {
        onClear === null || onClear === void 0 ? void 0 : onClear(event);
        externalOnChange === null || externalOnChange === void 0 ? void 0 : externalOnChange(null, "");
        setValue("");
        setSearchTerm("");
    }, [externalOnChange, onClear, setValue]);
    const focusInput = (0, react_1.useCallback)(() => {
        var _a, _b;
        (_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
    }, []);
    (0, hooks_1.useClientLayoutEffect)(() => {
        var _a, _b;
        if (shouldAutocomplete && inputRef && value !== searchTerm) {
            (_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange) === null || _b === void 0 ? void 0 : _b.call(_a, searchTerm.length, value.length);
        }
    }, [value, searchTerm, shouldAutocomplete]);
    const contextValue = Object.assign(Object.assign({}, formFieldProps), { clearInput,
        error,
        focusInput,
        inputRef,
        value,
        setValue,
        onChange,
        searchTerm,
        setSearchTerm,
        shouldAutocomplete,
        toggleOpenButtonRef });
    return (react_1.default.createElement(InputContextProvider, Object.assign({}, contextValue), children));
};
exports.InputContextProvider = InputProvider;
//# sourceMappingURL=Input.context.js.map