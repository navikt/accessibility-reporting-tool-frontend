"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const util_1 = require("../../../util");
const filtered_options_util_1 = __importDefault(require("../FilteredOptions/filtered-options-util"));
const filteredOptionsContext_1 = require("../FilteredOptions/filteredOptionsContext");
const selectedOptionsContext_1 = require("../SelectedOptions/selectedOptionsContext");
const Input_context_1 = require("./Input.context");
const Input = (0, react_1.forwardRef)((_a, ref) => {
    var { inputClassName } = _a, rest = __rest(_a, ["inputClassName"]);
    const { clearInput, inputProps, onChange, size, value } = (0, Input_context_1.useInputContext)();
    const { selectedOptions, removeSelectedOption, toggleOption, isMultiSelect, } = (0, selectedOptionsContext_1.useSelectedOptionsContext)();
    const { activeDecendantId, allowNewValues, currentOption, filteredOptions, isValueNew, toggleIsListOpen, isListOpen, ariaDescribedBy, setIsMouseLastUsedInputDevice, shouldAutocomplete, virtualFocus, } = (0, filteredOptionsContext_1.useFilteredOptionsContext)();
    const onEnter = (0, react_1.useCallback)((event) => {
        const isTextInSelectedOptions = (text) => selectedOptions.some((option) => option.label.toLocaleLowerCase() === text.toLocaleLowerCase());
        if (currentOption) {
            event.preventDefault();
            // Selecting a value from the dropdown / FilteredOptions
            toggleOption(currentOption, event);
            if (!isMultiSelect && !isTextInSelectedOptions(currentOption.label)) {
                toggleIsListOpen(false);
            }
        }
        else if (shouldAutocomplete && isTextInSelectedOptions(value)) {
            event.preventDefault();
            // Trying to set the same value that is already set, so just clearing the input
            clearInput(event);
        }
        else if ((allowNewValues || shouldAutocomplete) && value !== "") {
            event.preventDefault();
            // Autocompleting or adding a new value
            const selectedValue = allowNewValues && isValueNew
                ? { label: value, value }
                : filteredOptions[0];
            toggleOption(selectedValue, event);
            if (!isMultiSelect &&
                !isTextInSelectedOptions(filteredOptions[0].label || selectedValue.label)) {
                toggleIsListOpen(false);
            }
        }
    }, [
        allowNewValues,
        clearInput,
        currentOption,
        filteredOptions,
        isMultiSelect,
        isValueNew,
        selectedOptions,
        shouldAutocomplete,
        toggleIsListOpen,
        toggleOption,
        value,
    ]);
    const handleKeyUp = (e) => {
        e.preventDefault();
        switch (e.key) {
            case "Escape":
                clearInput(e);
                toggleIsListOpen(false);
                break;
            case "Enter":
            case "Accept":
                onEnter(e);
                break;
            case "Home":
                toggleIsListOpen(false);
                virtualFocus.moveFocusToTop();
                break;
            case "End":
                toggleIsListOpen(true);
                virtualFocus.moveFocusToBottom();
                break;
            default:
                break;
        }
    };
    const handleKeyDown = (0, react_1.useCallback)((e) => {
        setIsMouseLastUsedInputDevice(false);
        if (e.key === "Backspace") {
            if (value === "") {
                const lastSelectedOption = selectedOptions[selectedOptions.length - 1];
                if (lastSelectedOption) {
                    removeSelectedOption(lastSelectedOption);
                }
            }
        }
        else if (e.key === "Enter" || e.key === "Accept") {
            if (activeDecendantId || value) {
                e.preventDefault();
            }
        }
        else if (e.key === "ArrowDown") {
            // Check that cursor position is at the end of the input field,
            // so we don't interfere with text editing
            if (e.target.selectionStart === (value === null || value === void 0 ? void 0 : value.length)) {
                e.preventDefault();
                if (virtualFocus.activeElement === null || !isListOpen) {
                    toggleIsListOpen(true);
                }
                virtualFocus.moveFocusDown();
            }
        }
        else if (e.key === "ArrowUp") {
            // Check that the FilteredOptions list is open and has virtual focus.
            // Otherwise ignore keystrokes, so it doesn't interfere with text editing
            if (isListOpen && activeDecendantId) {
                e.preventDefault();
                if (virtualFocus.isFocusOnTheTop()) {
                    toggleIsListOpen(false);
                }
                virtualFocus.moveFocusUp();
            }
        }
    }, [
        value,
        selectedOptions,
        removeSelectedOption,
        isListOpen,
        activeDecendantId,
        setIsMouseLastUsedInputDevice,
        toggleIsListOpen,
        virtualFocus,
    ]);
    const onChangeHandler = (0, react_1.useCallback)((event) => {
        const newValue = event.target.value;
        if (newValue && newValue !== "") {
            toggleIsListOpen(true);
        }
        else if (filteredOptions.length === 0) {
            toggleIsListOpen(false);
        }
        virtualFocus.moveFocusToTop();
        onChange(event);
    }, [filteredOptions.length, virtualFocus, onChange, toggleIsListOpen]);
    return (react_1.default.createElement("input", Object.assign({}, rest, (0, util_1.omit)(inputProps, ["aria-invalid"]), { ref: ref, value: value, onBlur: () => virtualFocus.moveFocusToTop(), onChange: onChangeHandler, type: "text", role: "combobox", onKeyUp: handleKeyUp, onKeyDown: handleKeyDown, "aria-controls": filtered_options_util_1.default.getFilteredOptionsId(inputProps.id), "aria-expanded": !!isListOpen, autoComplete: "off", "aria-autocomplete": shouldAutocomplete ? "both" : "list", "aria-activedescendant": activeDecendantId, "aria-describedby": ariaDescribedBy, "aria-invalid": inputProps["aria-invalid"], className: (0, clsx_1.default)(inputClassName, "navds-combobox__input", "navds-body-short", `navds-body-short--${size}`) })));
});
exports.default = Input;
//# sourceMappingURL=Input.js.map