import React, { SetStateAction } from "react";
import { ComboboxOption, ComboboxProps } from "../types";
import { VirtualFocusType } from "./useVirtualFocus";
type FilteredOptionsProps = {
    children: React.ReactNode;
    value: Pick<ComboboxProps, "allowNewValues" | "isListOpen" | "isLoading"> & {
        filteredOptions?: ComboboxOption[];
        options: ComboboxOption[];
    };
};
type FilteredOptionsContextValue = {
    activeDecendantId?: string;
    allowNewValues?: boolean;
    ariaDescribedBy?: string;
    setFilteredOptionsRef: React.Dispatch<React.SetStateAction<HTMLUListElement | null>>;
    isListOpen: boolean;
    isLoading?: boolean;
    filteredOptions: ComboboxOption[];
    isMouseLastUsedInputDevice: boolean;
    setIsMouseLastUsedInputDevice: React.Dispatch<SetStateAction<boolean>>;
    isValueNew: boolean;
    toggleIsListOpen: (newState?: boolean) => void;
    currentOption?: ComboboxOption;
    shouldAutocomplete?: boolean;
    virtualFocus: VirtualFocusType;
};
declare const useFilteredOptionsContext: <S extends boolean = true>(strict?: S) => S extends true ? FilteredOptionsContextValue : FilteredOptionsContextValue | undefined;
declare const FilteredOptionsProvider: ({ children, value: props, }: FilteredOptionsProps) => React.JSX.Element;
export { FilteredOptionsProvider, useFilteredOptionsContext };
