"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importDefault(require("react"));
const aksel_icons_1 = require("@navikt/aksel-icons");
const loader_1 = require("../../../loader");
const typography_1 = require("../../../typography");
const Input_context_1 = require("../Input/Input.context");
const selectedOptionsContext_1 = require("../SelectedOptions/selectedOptionsContext");
const combobox_utils_1 = require("../combobox-utils");
const filtered_options_util_1 = __importDefault(require("./filtered-options-util"));
const filteredOptionsContext_1 = require("./filteredOptionsContext");
const FilteredOptions = () => {
    var _a;
    const { inputProps: { id }, size, value, } = (0, Input_context_1.useInputContext)();
    const { allowNewValues, isLoading, isListOpen, filteredOptions, setFilteredOptionsRef, isMouseLastUsedInputDevice, setIsMouseLastUsedInputDevice, isValueNew, toggleIsListOpen, activeDecendantId, virtualFocus, } = (0, filteredOptionsContext_1.useFilteredOptionsContext)();
    const { isMultiSelect, selectedOptions, toggleOption, maxSelected } = (0, selectedOptionsContext_1.useSelectedOptionsContext)();
    const isDisabled = (option) => (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && !(0, combobox_utils_1.isInList)(option.value, selectedOptions);
    const shouldRenderNonSelectables = (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) || // Render maxSelected message
        isLoading || // Render loading message
        (!isLoading && filteredOptions.length === 0 && !allowNewValues); // Render no hits message
    const shouldRenderFilteredOptionsList = (allowNewValues && isValueNew && !(maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached)) || // Render add new option
        filteredOptions.length > 0; // Render filtered options
    return (react_1.default.createElement("div", { className: (0, clsx_1.default)("navds-combobox__list", {
            "navds-combobox__list--closed": !isListOpen,
            "navds-combobox__list--with-hover": isMouseLastUsedInputDevice,
        }), id: filtered_options_util_1.default.getFilteredOptionsId(id), tabIndex: -1 },
        shouldRenderNonSelectables && (react_1.default.createElement("div", { className: "navds-combobox__list_non-selectables", role: "status" },
            (maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && (react_1.default.createElement("div", { className: "navds-combobox__list-item--max-selected", id: filtered_options_util_1.default.getMaxSelectedOptionsId(id) }, (_a = maxSelected.message) !== null && _a !== void 0 ? _a : `${selectedOptions.length} av ${maxSelected.limit} er valgt.`)),
            isLoading && (react_1.default.createElement("div", { className: "navds-combobox__list-item--loading", id: filtered_options_util_1.default.getIsLoadingId(id) },
                react_1.default.createElement(loader_1.Loader, { title: "S\u00F8ker..." }))),
            !isLoading && filteredOptions.length === 0 && !allowNewValues && (react_1.default.createElement("div", { className: "navds-combobox__list-item--no-options", id: filtered_options_util_1.default.getNoHitsId(id) }, "Ingen s\u00F8ketreff")))),
        shouldRenderFilteredOptionsList && (react_1.default.createElement("ul", { ref: setFilteredOptionsRef, role: "listbox", className: "navds-combobox__list-options" },
            isValueNew && !(maxSelected === null || maxSelected === void 0 ? void 0 : maxSelected.isLimitReached) && allowNewValues && (react_1.default.createElement("li", { tabIndex: -1, onMouseMove: () => {
                    if (activeDecendantId !==
                        filtered_options_util_1.default.getAddNewOptionId(id)) {
                        virtualFocus.moveFocusToElement(filtered_options_util_1.default.getAddNewOptionId(id));
                        setIsMouseLastUsedInputDevice(true);
                    }
                }, onPointerUp: (event) => {
                    toggleOption((0, combobox_utils_1.toComboboxOption)(value), event);
                    if (!isMultiSelect && !(0, combobox_utils_1.isInList)(value, selectedOptions))
                        toggleIsListOpen(false);
                }, id: filtered_options_util_1.default.getAddNewOptionId(id), className: (0, clsx_1.default)("navds-combobox__list-item navds-combobox__list-item--new-option", {
                    "navds-combobox__list-item--new-option--focus": activeDecendantId ===
                        filtered_options_util_1.default.getAddNewOptionId(id),
                }), role: "option", "aria-selected": false },
                react_1.default.createElement(aksel_icons_1.PlusIcon, { "aria-hidden": true }),
                react_1.default.createElement(typography_1.BodyShort, { size: size },
                    "Legg til",
                    " ",
                    react_1.default.createElement(typography_1.Label, { as: "span", size: size },
                        "\u201C",
                        value,
                        "\u201D")))),
            filteredOptions.map((option) => (react_1.default.createElement("li", { className: (0, clsx_1.default)("navds-combobox__list-item", {
                    "navds-combobox__list-item--focus": activeDecendantId ===
                        filtered_options_util_1.default.getOptionId(id, option.label),
                    "navds-combobox__list-item--selected": (0, combobox_utils_1.isInList)(option.value, selectedOptions),
                }), "data-no-focus": isDisabled(option) || undefined, id: filtered_options_util_1.default.getOptionId(id, option.label), key: option.label, tabIndex: -1, onMouseMove: () => {
                    if (activeDecendantId !==
                        filtered_options_util_1.default.getOptionId(id, option.label)) {
                        virtualFocus.moveFocusToElement(filtered_options_util_1.default.getOptionId(id, option.label));
                        setIsMouseLastUsedInputDevice(true);
                    }
                }, onPointerUp: (event) => {
                    if (isDisabled(option)) {
                        return;
                    }
                    toggleOption(option, event);
                    if (!isMultiSelect &&
                        !(0, combobox_utils_1.isInList)(option.value, selectedOptions)) {
                        toggleIsListOpen(false);
                    }
                }, role: "option", "aria-selected": (0, combobox_utils_1.isInList)(option.value, selectedOptions), "aria-disabled": isDisabled(option) || undefined },
                react_1.default.createElement(typography_1.BodyShort, { size: size }, option.label),
                (0, combobox_utils_1.isInList)(option.value, selectedOptions) && react_1.default.createElement(aksel_icons_1.CheckmarkIcon, null))))))));
};
exports.default = FilteredOptions;
//# sourceMappingURL=FilteredOptions.js.map