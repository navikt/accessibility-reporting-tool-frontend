"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useVirtualFocus = (containerRef) => {
    const [activeElement, setActiveElement] = (0, react_1.useState)(undefined);
    const getListOfAllChildren = () => { var _a; return Array.from((_a = containerRef === null || containerRef === void 0 ? void 0 : containerRef.children) !== null && _a !== void 0 ? _a : []); };
    const getElementsAbleToReceiveFocus = () => getListOfAllChildren().filter((child) => child.getAttribute("data-no-focus") !== "true");
    const getElementById = (id) => getListOfAllChildren().find((element) => element.id === id);
    const isFocusOnTheTop = () => activeElement
        ? getElementsAbleToReceiveFocus().indexOf(activeElement) === 0
        : false;
    const isFocusOnTheBottom = () => {
        const elementsAbleToReceiveFocus = getElementsAbleToReceiveFocus();
        return activeElement
            ? elementsAbleToReceiveFocus.indexOf(activeElement) ===
                elementsAbleToReceiveFocus.length - 1
            : false;
    };
    const _moveFocusAndScrollTo = (_element) => {
        var _a;
        setActiveElement(_element);
        (_a = _element === null || _element === void 0 ? void 0 : _element.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(_element, { block: "nearest" });
    };
    const moveFocusUp = () => {
        if (!activeElement) {
            return;
        }
        const elementsAbleToReceiveFocus = getElementsAbleToReceiveFocus();
        const _currentIndex = elementsAbleToReceiveFocus.indexOf(activeElement);
        const elementAbove = elementsAbleToReceiveFocus[_currentIndex - 1];
        if (_currentIndex === 0) {
            setActiveElement(undefined);
        }
        else {
            _moveFocusAndScrollTo(elementAbove);
        }
    };
    const moveFocusDown = () => {
        const elementsAbleToReceiveFocus = getElementsAbleToReceiveFocus();
        if (!activeElement) {
            _moveFocusAndScrollTo(elementsAbleToReceiveFocus[0]);
            return;
        }
        const _currentIndex = elementsAbleToReceiveFocus.indexOf(activeElement);
        if (_currentIndex === elementsAbleToReceiveFocus.length - 1) {
            return;
        }
        _moveFocusAndScrollTo(elementsAbleToReceiveFocus[_currentIndex + 1]);
    };
    const moveFocusToTop = () => _moveFocusAndScrollTo(undefined);
    const moveFocusToBottom = () => {
        const elementsAbleToReceiveFocus = getElementsAbleToReceiveFocus();
        return _moveFocusAndScrollTo(elementsAbleToReceiveFocus[elementsAbleToReceiveFocus.length - 1]);
    };
    const moveFocusToElement = (id) => {
        const _element = getElementsAbleToReceiveFocus().find((_focusableElement) => _focusableElement.getAttribute("id") === id);
        if (_element) {
            setActiveElement(_element);
        }
    };
    return {
        activeElement,
        getElementById,
        isFocusOnTheTop,
        isFocusOnTheBottom,
        moveFocusUp,
        moveFocusDown,
        moveFocusToElement,
        moveFocusToTop,
        moveFocusToBottom,
    };
};
exports.default = useVirtualFocus;
//# sourceMappingURL=useVirtualFocus.js.map