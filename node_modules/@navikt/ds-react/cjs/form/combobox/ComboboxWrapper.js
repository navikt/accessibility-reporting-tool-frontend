"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const clsx_1 = __importDefault(require("clsx"));
const react_1 = __importStar(require("react"));
const Input_context_1 = require("./Input/Input.context");
const ComboboxWrapper = ({ children, className, hasError, inputProps, inputSize, toggleIsListOpen, }) => {
    const { toggleOpenButtonRef } = (0, Input_context_1.useInputContext)();
    const wrapperRef = (0, react_1.useRef)(null);
    const [hasFocusWithin, setHasFocusWithin] = (0, react_1.useState)(false);
    function onFocusInsideWrapper(e) {
        var _a;
        if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) &&
            (toggleOpenButtonRef === null || toggleOpenButtonRef === void 0 ? void 0 : toggleOpenButtonRef.current) !== e.target) {
            toggleIsListOpen(true);
            setHasFocusWithin(true);
        }
    }
    function onBlurWrapper(e) {
        var _a;
        if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))) {
            toggleIsListOpen(false);
            setHasFocusWithin(false);
        }
    }
    return (react_1.default.createElement("div", { ref: wrapperRef, className: (0, clsx_1.default)(className, "navds-form-field", `navds-form-field--${inputSize}`, {
            "navds-combobox--error": hasError,
            "navds-combobox--disabled": !!inputProps.disabled,
            "navds-combobox--focused": hasFocusWithin,
        }), onFocus: onFocusInsideWrapper, onBlur: onBlurWrapper }, children));
};
exports.default = ComboboxWrapper;
//# sourceMappingURL=ComboboxWrapper.js.map