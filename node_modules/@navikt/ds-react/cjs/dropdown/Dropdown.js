"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dropdown = void 0;
const react_1 = __importStar(require("react"));
const useControllableState_1 = require("../util/hooks/useControllableState");
const Menu_1 = __importDefault(require("./Menu"));
const Toggle_1 = __importDefault(require("./Toggle"));
const context_1 = require("./context");
/**
 * A component that displays a dropdown menu when the user clicks on its toggle button.
 *
 * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/dropdown)
 * @see üè∑Ô∏è {@link DropdownProps}
 *
 * @example
 * ```jsx
 * <Dropdown>
 *   <Button as={Dropdown.Toggle}>Toggle</Button>
 *   <Dropdown.Menu>
 *     <Dropdown.Menu.GroupedList>
 *       <Dropdown.Menu.GroupedList.Heading>
 *         Systemer og oppslagsverk
 *       </Dropdown.Menu.GroupedList.Heading>
 *       <Dropdown.Menu.GroupedList.Item>
 *         Gosys
 *       </Dropdown.Menu.GroupedList.Item>
 *       <Dropdown.Menu.GroupedList.Item>
 *         Infotrygd
 *       </Dropdown.Menu.GroupedList.Item>
 *     </Dropdown.Menu.GroupedList>
 *     <Dropdown.Menu.Divider />
 *     <Dropdown.Menu.List>
 *       <Dropdown.Menu.List.Item>Gosys</Dropdown.Menu.List.Item>
 *       <Dropdown.Menu.List.Item>Infotrygd</Dropdown.Menu.List.Item>
 *     </Dropdown.Menu.List>
 *   </Dropdown.Menu>
 * </Dropdown>
 * ```
 */
exports.Dropdown = (({ children, onSelect, closeOnSelect = true, defaultOpen = false, open, onOpenChange, }) => {
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    const [_open, _setOpen] = (0, useControllableState_1.useControllableState)({
        defaultValue: defaultOpen,
        value: open,
        onChange: onOpenChange,
    });
    return (react_1.default.createElement(context_1.DropdownContext.Provider, { value: {
            isOpen: _open,
            handleToggle: _setOpen,
            anchorEl,
            setAnchorEl,
            onSelect: (event) => {
                onSelect === null || onSelect === void 0 ? void 0 : onSelect(event);
                closeOnSelect && _setOpen(false);
            },
        } }, children));
});
exports.Dropdown.Toggle = Toggle_1.default;
exports.Dropdown.Menu = Menu_1.default;
exports.default = exports.Dropdown;
//# sourceMappingURL=Dropdown.js.map