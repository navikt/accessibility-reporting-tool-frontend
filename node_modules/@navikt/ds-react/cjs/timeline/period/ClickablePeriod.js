"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("@floating-ui/react");
const clsx_1 = __importDefault(require("clsx"));
const react_2 = __importStar(require("react"));
const useMergeRefs_1 = require("../../util/hooks/useMergeRefs");
const usePeriodContext_1 = require("../hooks/usePeriodContext");
const useRowContext_1 = require("../hooks/useRowContext");
const useTimelineContext_1 = require("../hooks/useTimelineContext");
const period_1 = require("../utils/period");
const ClickablePeriod = react_2.default.memo(({ onSelectPeriod, start, end, status, cropped, direction, left, width, icon, children, isActive, statusLabel, restProps, periodRef, }) => {
    const [open, setOpen] = (0, react_2.useState)(false);
    const { index } = (0, useRowContext_1.useRowContext)();
    const { firstFocus } = (0, usePeriodContext_1.usePeriodContext)();
    const { initiate, addFocusable } = (0, useTimelineContext_1.useTimelineContext)();
    const arrowRef = (0, react_2.useRef)(null);
    const { context, placement, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, refs, floatingStyles, } = (0, react_1.useFloating)({
        placement: "top",
        open,
        onOpenChange: (_open) => setOpen(_open),
        whileElementsMounted: react_1.autoUpdate,
        middleware: [
            (0, react_1.offset)(16),
            (0, react_1.shift)(),
            (0, react_1.flip)({ padding: 5, fallbackPlacements: ["bottom", "top"] }),
            (0, react_1.arrow)({ element: arrowRef, padding: 5 }),
        ],
    });
    const hover = (0, react_1.useHover)(context, {
        handleClose: (0, react_1.safePolygon)(),
        restMs: 25,
        delay: { open: 1000 },
        move: false,
    });
    const focus = (0, react_1.useFocus)(context);
    const dismiss = (0, react_1.useDismiss)(context);
    const role = (0, react_1.useRole)(context, { role: "dialog" });
    const { getFloatingProps, getReferenceProps } = (0, react_1.useInteractions)([
        hover,
        focus,
        dismiss,
        role,
    ]);
    const mergedRef = (0, useMergeRefs_1.useMergeRefs)(refs.setReference, periodRef);
    const staticSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right",
    }[placement.split("-")[0]];
    return (react_2.default.createElement(react_2.default.Fragment, null,
        react_2.default.createElement("button", Object.assign({}, restProps, { type: "button", ref: (r) => {
                firstFocus && addFocusable(r, index);
                mergedRef(r);
            }, "aria-label": (0, period_1.ariaLabel)(start, end, status, statusLabel), className: (0, clsx_1.default)("navds-timeline__period--clickable", (0, period_1.getConditionalClasses)(cropped, direction, status), restProps === null || restProps === void 0 ? void 0 : restProps.className, {
                "navds-timeline__period--selected": isActive,
            }), "aria-expanded": children ? open : undefined, "aria-current": isActive || undefined }, getReferenceProps({
            onFocus: () => {
                initiate(index);
            },
            onKeyDown: (e) => {
                var _a;
                (_a = restProps === null || restProps === void 0 ? void 0 : restProps.onKeydown) === null || _a === void 0 ? void 0 : _a.call(restProps, e);
                if (e.key === "Enter") {
                    setOpen((prev) => !prev);
                }
                if (e.key === " ") {
                    onSelectPeriod === null || onSelectPeriod === void 0 ? void 0 : onSelectPeriod(e);
                    setOpen(false);
                }
            },
            style: {
                width: `${width}%`,
                [direction]: `${left}%`,
            },
            onClick: (e) => {
                var _a;
                (_a = restProps === null || restProps === void 0 ? void 0 : restProps.onClick) === null || _a === void 0 ? void 0 : _a.call(restProps, e);
                if (e.detail === 0) {
                    return;
                }
                onSelectPeriod === null || onSelectPeriod === void 0 ? void 0 : onSelectPeriod(e);
            },
        })),
            react_2.default.createElement("span", { className: "navds-timeline__period--inner" }, icon)),
        children && open && (react_2.default.createElement(react_1.FloatingFocusManager, { context: context, modal: false, initialFocus: -1, returnFocus: false },
            react_2.default.createElement("div", Object.assign({ className: "navds-timeline__popover", "data-placement": placement, ref: refs.setFloating }, getFloatingProps(), { style: floatingStyles }),
                children,
                react_2.default.createElement("div", { ref: arrowRef, style: Object.assign(Object.assign(Object.assign({}, (arrowX != null ? { left: arrowX } : {})), (arrowY != null ? { top: arrowY } : {})), (staticSide ? { [staticSide]: "-0.5rem" } : {})), className: "navds-timeline__popover-arrow" }))))));
});
exports.default = ClickablePeriod;
//# sourceMappingURL=ClickablePeriod.js.map