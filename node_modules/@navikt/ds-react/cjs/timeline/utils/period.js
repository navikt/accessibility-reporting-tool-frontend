"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ariaLabel = exports.getConditionalClasses = void 0;
const clsx_1 = __importDefault(require("clsx"));
const date_fns_1 = require("date-fns");
const getConditionalClasses = (cropped, direction, status) => {
    return (0, clsx_1.default)(`navds-timeline__period navds-timeline__period--${status}`, {
        "navds-timeline__period--connected-both": cropped === "both",
        "navds-timeline__period--connected-right": (cropped === "right" && direction === "left") ||
            (cropped === "left" && direction === "right"),
        "navds-timeline__period--connected-left": (cropped === "left" && direction === "left") ||
            (cropped === "right" && direction === "right"),
    });
};
exports.getConditionalClasses = getConditionalClasses;
const translateStatus = (status) => {
    switch (status) {
        case "success":
            return "Suksess";
        case "warning":
            return "Advarsel";
        case "danger":
            return "Fare";
        case "info":
            return "Info";
        case "neutral":
            return "NÃ¸ytral";
        default:
            return status;
    }
};
const ariaLabel = (startDate, endDate, status, statusLabel) => {
    const start = (0, date_fns_1.format)(startDate, "dd.MM.yyyy");
    const end = (0, date_fns_1.format)(endDate, "dd.MM.yyyy");
    return `${statusLabel ? statusLabel : translateStatus(status)} fra ${start} til ${end}`;
};
exports.ariaLabel = ariaLabel;
//# sourceMappingURL=period.js.map