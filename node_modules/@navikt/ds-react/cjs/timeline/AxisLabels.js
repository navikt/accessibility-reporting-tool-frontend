"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxisLabels = exports.yearLabels = exports.monthLabels = exports.dayLabels = void 0;
const date_fns_1 = require("date-fns");
const locale_1 = require("date-fns/locale");
const react_1 = __importDefault(require("react"));
const Detail_1 = require("../typography/Detail");
const useTimelineContext_1 = require("./hooks/useTimelineContext");
const utils_1 = require("./utils");
const calc_1 = require("./utils/calc");
const dayLabels = (start, end, totalDays, direction, template = "dd.MM") => {
    const increment = Math.ceil(totalDays / 10);
    const lastDay = (0, date_fns_1.startOfDay)(end);
    return new Array(totalDays)
        .fill(lastDay)
        .map((thisDay, i) => {
        if (i % increment !== 0)
            return null;
        const day = (0, date_fns_1.subDays)(thisDay, i);
        const { horizontalPosition, width } = (0, calc_1.horizontalPositionAndWidth)(day, (0, date_fns_1.addDays)(day, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: (0, date_fns_1.format)(day, template, { locale: locale_1.nb }),
            date: day,
            width,
        };
    })
        .filter((label) => label !== null);
};
exports.dayLabels = dayLabels;
const monthLabels = (start, end, direction, template = "MMM yy") => {
    const startMonth = (0, date_fns_1.startOfMonth)(start);
    const endMonth = (0, date_fns_1.endOfMonth)(end);
    const numberOfMonths = (0, date_fns_1.differenceInMonths)(endMonth, startMonth) + 1;
    return new Array(numberOfMonths).fill(startMonth).map((thisMonth, i) => {
        const month = (0, date_fns_1.addMonths)(thisMonth, i);
        const { horizontalPosition, width } = (0, calc_1.horizontalPositionAndWidth)(month, (0, date_fns_1.addMonths)(month, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: (0, date_fns_1.format)(month, template, { locale: locale_1.nb }),
            date: month,
            width,
        };
    });
};
exports.monthLabels = monthLabels;
const yearLabels = (start, end, direction, template = "yyyy") => {
    const firstYear = (0, date_fns_1.startOfYear)(start);
    const lastYear = (0, date_fns_1.endOfYear)(end);
    const yearCount = (0, date_fns_1.differenceInYears)(lastYear, start) + 1;
    return new Array(yearCount).fill(firstYear).map((thisYear, i) => {
        const year = (0, date_fns_1.addYears)(thisYear, i);
        const { horizontalPosition, width } = (0, calc_1.horizontalPositionAndWidth)(year, (0, date_fns_1.addYears)(year, 1), start, end);
        return {
            direction,
            horizontalPosition,
            label: (0, date_fns_1.format)(year, template, { locale: locale_1.nb }),
            date: year,
            width,
        };
    });
};
exports.yearLabels = yearLabels;
const axisLabels = (start, end, direction, templates) => {
    const totalDays = (0, date_fns_1.differenceInDays)(end, start);
    if (totalDays < 40) {
        return (0, exports.dayLabels)(start, end, totalDays, direction, templates === null || templates === void 0 ? void 0 : templates.day);
    }
    if (totalDays < 370) {
        return (0, exports.monthLabels)(start, end, direction, templates === null || templates === void 0 ? void 0 : templates.month);
    }
    return (0, exports.yearLabels)(start, end, direction, templates === null || templates === void 0 ? void 0 : templates.year);
};
const AxisLabels = ({ templates, }) => {
    const { endDate, startDate, direction } = (0, useTimelineContext_1.useTimelineContext)();
    const labels = axisLabels(startDate, endDate, direction, templates).filter(utils_1.isVisible);
    return (react_1.default.createElement("div", { className: "navds-timeline__axislabels", "aria-hidden": "true" }, labels.map((etikett) => (react_1.default.createElement(Detail_1.Detail, { className: "navds-timeline__axislabels-label", as: "div", key: etikett.label, style: {
            justifyContent: direction === "left" ? "flex-start" : "flex-end",
            [direction]: `${etikett.horizontalPosition}%`,
            width: `${etikett.width}%`,
        } }, etikett.label)))));
};
exports.AxisLabels = AxisLabels;
//# sourceMappingURL=AxisLabels.js.map